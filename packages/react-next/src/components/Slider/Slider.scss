@import '../../common/themeCssVariables';
@import '../../common/highContrast';
@import '../../common/focusBorder';

/**
   Tokens:
   *   The word "active" in the token refers to the selected section of the slider
   *   The word "inactive" in the token refers to the unselected section of the slider
   */

@mixin activeSectionHoverStyles() {
  .activeSection {
    background-color: var($semanticColorsInputBackgroundCheckedHovered);
    @include high-contrast {
      background-color: Highlight;
    }
  }
}

@mixin inactiveSectionStyles {
  .inactiveSection {
    background-color: var($semanticColorsInputPlaceholderBackgroundChecked);
    @include high-contrast {
      border-color: Highlight;
    }
  }
}

@mixin activeSectionActiveStyles {
  .activeSection {
    background-color: var($semanticColorsInputBackgroundChecked);
    @include high-contrast {
      background-color: Highlight;
    }
  }
}
@mixin activeThumbStyles {
  .thumb {
    border: 2px solid var($semanticColorsInputBackgroundCheckedHovered);
    @include high-contrast {
      bordercolor: Highlight;
    }
  }
}

@mixin slideBoxctiveZeroTickStyles {
  .zeroTick {
    background-color: var($semanticColorsInputPlaceholderBackgroundChecked);
    @include high-contrast {
      background-color: Highlight;
    }
  }
}

.root {
  //theme.fonts.medium;
  font-size: var($fontsMediumFontSize);
  user-select: none;

  &.vertical {
    margin-right: 8;
  }
}

.titleLabel {
  padding: 0;
}

.container {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  .vertical & {
    flex-direction: column;
    height: 100%;
    text-align: center;
    margin: 8px 0;
  }
}

.slideBox {
  //getFocusStyle(theme);
  background: transparent;
  border: none;
  flex-grow: 1;
  line-height: 28px;
  display: flex;
  align-items: center;
  height: 28px;
  width: auto;
  padding: 0 8px; // Make room for thumb at ends of line

  .enabled & {
    &:active {
      @include activeSectionActiveStyles();
      @include inactiveSectionStyles();
      @include activeThumbStyles();
      @include slideBoxctiveZeroTickStyles();
    }

    &:hover {
      @include activeSectionHoverStyles();
      @include inactiveSectionStyles();
      @include activeThumbStyles();
      @include slideBoxctiveZeroTickStyles();
    }
  }
  .vertical & {
    height: 100%;
    width: 28px;
    padding: 8px 0; // Make room for thumb at bottom of line
  }
}

.thumb {
  border-width: 2px;
  border-style: solid;
  border-color: var($semanticColorsSmallInputBorder);
  border-radius: 10px;
  box-sizing: border-box;
  background: var($semanticColorsInputBackground);
  display: block;
  width: 16px;
  height: 16px;
  position: absolute;
  top: -6px;

  //transform: getRTL(theme) ? translateX(50%) : translateX(-50%);
  .vertical & {
    left: -6px;
    margin: 0 auto;
    transform: translateY(8px);
  }
  // TODO
  // showTransitions && {
  //   transition: `left ${AnimationVariables.durationValue3} ${AnimationVariables.easeFunction1}`;
  // };
  .disabled & {
    border-color: var($semanticColorsDisabledBorder);
    @include high-contrast {
      bordercolor: GrayText;
    }
  }
}
.line {
  display: flex;
  position: relative;
  width: 100%;
  .vertical & {
    height: 100%;
    width: 4px;
    margin: 0 auto;
    flex-direction: column-reverse;
  }
}

.lineContainer {
  border-radius: 4px;
  box-sizing: border-box;
  height: 4px;
  width: 100%;
  .vertical & {
    width: 4px;
    height: 100%;
  }
}

.activeSection {
  background: var($semanticColorsSmallInputBorder);

  @include high-contrast {
    backgroundcolor: WindowText;
  }

  .showTransitions & {
    transition: 3 3 3;
    // transition: `width ${nimationVariables.durationValue3} ${AnimationVariables.easeFunction1}`;
  }

  .disabled & {
    background: var($semanticColorsDisabledText);
    @include high-contrast {
      backgroundcolor: GrayText;
      bordercolor: GrayText;
    }
  }
}

.inactiveSection {
  background: var($semanticColorsDisabledBorder);
  @include high-contrast {
    border: 1px solid WindowText;
  }

  .showTransitions & {
    transition: 3 3 3;
    //transition: `width ${nimationVariables.durationValue3} ${AnimationVariables.easeFunction1}`;
  }

  .disabled & {
    background: var($semanticColorsDisabledBackground);
    @include high-contrast {
      bordercolor: GrayText;
    }
  }
}

.zeroTick {
  position: absolute;
  background: var($semanticColorsDisabledBorder);
  width: 1px;
  height: 16px;
  transform: translateY(-6px);

  @include high-contrast {
    backgroundcolor: WindowText;
  }

  .disabled & {
    background: var($semanticColorsDisabledBackground);
    @include high-contrast {
      backgroundcolor: GrayText;
    }
  }

  .vertical & {
    width: 16px;
    height: 1px;
    transform: 3 3 3;
    //transform: getRTL(theme) ? translateX(6px) : 'translateX(-6px)';
  }
}

.valueLabel {
  flex-shrink: 1;
  width: 30px;
  line-height: 1px; // using a string here meaning its relative to the size of the font
  margin: 0 8px;
  white-space: nowrap;
  width: 40px;
  .vertical & {
    margin: 0 auto;
    white-space: nowrap;
    width: 40px;
  }
}
