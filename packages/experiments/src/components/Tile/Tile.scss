
@import '~office-ui-fabric-react/src/common/common';

$nameplatePadding: 12px;
$largeNameplateNameHeight: 15px;
$smallNameplateNameHeight: 12px;
$largeNameplateActivityHeight: 20px;
$smallNameplateActivityHeight: 20px;
$foregroundMargin: 16px;

// Values given by designers for placeholder tile.
// Large tile specs
$largeSquareWidth: 96px;
$largeSquareHeight: 96px;
$largeLineHeight: 7px;
$largeTopLineWidth: 144px;
$largeBottomLineWidth: $largeSquareWidth;
// Small tile specs
$smallSquareWidth: 62px;
$smallSquareHeight: 61px;
$smallLineHeight: 5px;
$smallTopLineWidth: 106px;
$smallBottomLineWidth: $smallSquareWidth;


$largeNameplateHeight: (($nameplatePadding * 2) + $largeNameplateNameHeight + $largeNameplateActivityHeight);
$smallNameplateHeight: (($nameplatePadding * 2) + $smallNameplateNameHeight + $smallNameplateActivityHeight);
$largeAboveNameplateHeight: calc(100% - #{$largeNameplateHeight});
$smallAboveNameplateHeight: calc(100% - #{$smallNameplateHeight});

@mixin placeholderBorders($type, $divHeight, $lineHeight, $lineWidth) {
  @if $type == 'nameBorders' {
    border-style: solid;
    border-color: $ms-color-white;
    border-width: $nameplatePadding $nameplatePadding ($divHeight - $lineHeight) $nameplatePadding;
  }
  @if $type == 'activityBorders' {
    border-style: solid;
    border-color: $ms-color-white;
    border-width: ($divHeight - ($lineHeight * 2)) ($nameplatePadding * 4) ($nameplatePadding + $lineHeight) ($nameplatePadding * 4);
  }
  @if $type == 'aboveNameplateBorders' {
    // border-top: ($divHeight - $lineHeight) solid $ms-color-white;
    // border-right: 0 solid $ms-color-white;
    // border-bottom: 0 solid $ms-color-white;
    // border-left: 0 solid $ms-color-white;
    border-style: solid;
    border-color: $ms-color-white;
    border-width: (($divHeight) - ($lineHeight)) 0 0 0;
  }
}

.tile {
  @include focus-clear();

  display: block;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 0; // Reset the stacking context.
  background-color: $ms-color-white;
  transition: transform 0.1s linear;
  color: $ms-color-neutralPrimary;

  user-select: none;

  &.selectable:hover {
    background-color: $ms-color-neutralLighter;

    &.selected {
      background-color: $ms-color-neutralQuaternaryAlt;
    }
  }

  &.selected {
    background-color: $ms-color-neutralLight;
  }

  @include focus(true) {
    background-color: $ms-color-neutralLighter;

    &.selected {
      background-color: $ms-color-neutralQuaternaryAlt; // Todo need a color variable.
    }
  }

  @include focus(true) {
    outline: 1px solid $ms-color-neutralSecondary;

    &.selected {
      outline: 1px solid $ms-color-themePrimary;
    }
  }

  &.hasBackgroundFrame {
    box-shadow: 0 1px 3px 1px rgba(1, 1, 0, 0.05);

    &.selectable:hover {
      outline: 1px solid $ms-color-neutralTertiaryAlt;
    }

    @include focus(true) {
      outline: 1px solid $ms-color-neutralSecondary;

      &.selected {
        outline: 1px solid $ms-color-themePrimary;
      }
    }

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      pointer-events: none;
      border: 2px solid $ms-color-white;
    }
  }

  &.invokable:active {
    transform: scale(0.95);
  }
}

.label {
  @include ms-screenReaderOnly;
}

.description {
  @include ms-screenReaderOnly;
}

.link {
  @include focus-clear();

  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  text-decoration: none;
  color: inherit;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: stretch;
  align-content: stretch;
  text-decoration: none;

  pointer-events: none;
}

.foreground {
  display: inline-flex;
  position: relative;
  overflow: hidden;
  max-width: 100%;
  max-height: 100%;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  opacity: 1;
  transition: opacity 0.2s linear;

  .tile.invokable & {
    pointer-events: auto;
    cursor: pointer;
  }

  &.foregroundHide {
    opacity: 0;
  }

  .hasForegroundFrame & {
    background-color: $ms-color-white;
    box-shadow: 0 1px 3px 1px rgba(1, 1, 0, 0.05);
    min-width: 32px;
    min-height: 32px;

    &:after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      pointer-events: none;
      border: 2px solid $ms-color-white;
    }
  }
}

.check {
  @include focus-border($position: absolute);
  display: none;
  flex-direction: column;
  align-items: flex-end;
  justify-content: flex-start;
  top: 0;
  @include right(0);
  border: none;
  background: none;
  opacity: 0;
  box-sizing: border-box;
  padding: 6px;

  .tile.uninvokable & {
    width: 100%;
    height: 100%;
  }

  .tile.selectable & {
    display: flex;
  }

  .tile.selected &,
  .tile:hover &,
  .tile.showCheck & {
    opacity: 1;
  }

  @include focus(true) {
    opacity: 1;
  }
}

.tile {
  @include focus(true) {
    .check {
      opacity: 1;
    }
  }
}

.background {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  overflow: hidden;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;

  .tile.invokable & {
    cursor: pointer;
    pointer-events: auto;
  }

  opacity: 1;

  transition: opacity 0.2s linear;

  &.backgroundHide {
    opacity: 0;
  }
}

.aboveNameplate {
  flex: 1;
  position: relative;
  margin: 16px 16px 0 16px;
}

.content {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;

  .hasForegroundFrame & {
    justify-content: flex-end;
  }
}

.nameplate {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: flex-end;
  position: relative;
  margin: auto 0 0 0;
  padding: 12px 8px;
  text-align: center;
  z-index: 0;

  .name {
    .tile.invokable & {
      pointer-events: auto;
      cursor: pointer;
    }

    transition: color 0.2s linear;

    .link:hover & {
      text-decoration: underline;
    }
  }

  .activity {
    transition: color 0.2s linear;
  }

  .tile.hasBackgroundFrame & {
    align-items: flex-start;
    padding: 12px 10px;
  }
}

.signal {
  display: inline-block;

  &.storageSignal {
    @include margin-left(4px);
  }

  &.socialSignal {
    @include margin-right(4px);
  }

  &.lifecycleSignal {
    @include margin-right(4px);
  }
}

.name {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  font-weight: $ms-font-weight-regular;
  color: $ms-color-neutralPrimary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;

  @include margin-left(-8px);
  @include padding-left(8px);

  &,
  .isLarge & {
    font-size: $ms-font-size-m;

    // Simulate a 15px line-height by using negative margins.
    // This allows extenders and descenders to fit while still enforcing bounds
    // for overflow: ellipsis.
    height: 30px;
    margin-top: -7px;
    margin-bottom: -8px;
  }

  .isSmall & {
    font-size: $ms-font-size-s;

    // Simulate a 12px line-height by using negative margins.
    // This allows extenders and descenders to fit while still enforcing bounds
    // for overflow: ellipsis.
    height: 24px;
    margin-top: -5px;
    margin-bottom: -7px;
  }
}

.activity {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  font-weight: $ms-font-weight-regular;
  font-size: $ms-font-size-s;
  color: #767676;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;

  // Simulate a 20px line-height by using negative margins.
  // This allows extenders and descenders to fit while still enforcing bounds
  // for overflow: ellipsis.
  height: 24px;
  margin-bottom: -4px;

  @include margin-left(-8px);
  @include padding-left(8px);
}

.hasBackgroundFrame {
  .name {
    justify-content: flex-start;
  }

  .activity {
    justify-content: flex-start;
  }
}

.hasBackground {
  .nameplate {
    &:before {
      position: absolute;
      content: '';
      display: block;
      top: -12px;
      bottom: 0;
      left: 0;
      right: 0;
      background-image: linear-gradient(to top, rgba(#000, 0.65) 0%, rgba(#000, 0.65 * 0.85) 55%, rgba(#000, 0.65 * 0.30) 80%, rgba(#000, 0) 100%);
      z-index: -1;
      transition: opacity 0.2s linear;
      opacity: 0;
    }
  }

  &.showBackground {
    .name {
      color: $ms-color-white;
      text-shadow: 0.5px 0.5px 2px rgba(#000, 0.55);
    }

    .activity {
      color: $ms-color-white;
      text-shadow: 0.5px 0.5px 2px rgba(#000, 0.55);
    }

    .nameplate {
      &:before {
        opacity: 1;
      }
    }
  }
}

// Tile styling when tile is used as a placeholder to cover a shimmering background leaving only specific windows.
.placeholderTile {
  width: 100%;
  height: 100%;

  .missingContent {
    background-color: $ms-color-white;
  }
}

.aboveNameplatePlaceholder,
.activityPlaceholder,
.namePlaceholder,
.nameplatePlaceholder {
  box-sizing: border-box;
  width: 100%;
}

.aboveNameplatePlaceholder {

  .isLargePlaceholder & {
    height: $largeAboveNameplateHeight;
    @include placeholderBorders('aboveNameplateBorders', $largeAboveNameplateHeight, $largeSquareHeight, $largeSquareWidth);
  }

  .isSmallPlaceholder & {
    height: $smallAboveNameplateHeight;
    @include placeholderBorders('aboveNameplateBorders', $smallAboveNameplateHeight, $smallSquareHeight, $smallSquareWidth);
  }
}

.nameplatePlaceholder {
  .isLargePlaceholder & {
    height: $largeNameplateHeight;

    .namePlaceholder {
      height: ($largeNameplateNameHeight + $nameplatePadding);
      @include placeholderBorders('nameBorders', $largeNameplateNameHeight, $largeLineHeight, $largeTopLineWidth);
    }

    .activityPlaceholder {
      height: ($largeNameplateActivityHeight + $nameplatePadding);
      @include placeholderBorders('activityBorders', $largeNameplateActivityHeight, $largeLineHeight, $smallTopLineWidth);
    }
  }

  .isSmallPlaceholder & {
    height: $smallNameplateHeight;

    .namePlaceholder {
      height: ($smallNameplateNameHeight + $nameplatePadding);
      @include placeholderBorders('nameBorders', $smallNameplateActivityHeight, $smallLineHeight, $largeBottomLineWidth);
    }

    .activityPlaceholder {
      height: ($smallNameplateActivityHeight + $nameplatePadding);
      @include placeholderBorders('activityBorders', $smallNameplateActivityHeight, $smallLineHeight, $smallBottomLineWidth);
    }
  }
}
