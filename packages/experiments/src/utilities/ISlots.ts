import { IStyle } from '@uifabric/styling';
import { IComponentStyles } from './IComponent';

/**
 * Signature of components that have component factories.
 */
export interface ISlotCreator<TProps> {
  create?: ISlotFactory<TProps>;
}

/**
 * Slottable version of React.ComponentType.
 */
// TODO: stateless component only?
export type ISlottableComponentType<TProps> = React.ComponentType<TProps> & ISlotCreator<TProps>;

/**
 * Slottable version of React.ReactType.
 */
// TODO: stateless component only?
export type ISlottableReactType<TProps> = React.ReactType<TProps> & ISlotCreator<TProps>;

/**
 * Props generated by Foundation.
 */
export interface IProcessedSlotProps {
  className?: string;
}

/**
 * Factory options for creating component.
 */
export interface IFactoryOptions<TProps> {
  /** Default prop for which to map primitive values. */
  defaultProp: keyof TProps | 'children';
}

/**
 * Helper interface for accessing user props children.
 */
export type IPropsWithChildren<TProps> = TProps & { children?: React.ReactNode };

/**
 * An interface for defining slots. Each key in TSlot must point to an ISlottableType.
 */
export type ISlotDefinition<TSlots> = { [prop in keyof TSlots]: ISlottableReactType<TSlots[prop]> };

/**
 * Created Slot structure used for rendering by components.
 */
export type ISlot<TProps> = ((componentProps: IPropsWithChildren<TProps> | undefined | null) => JSX.Element) & { isSlot?: boolean };

/**
 * Interface for a slot factory that consumes both componnent and user slot prop and generates rendered output.
 */
export type ISlotFactory<TProps> = (
  componentProps: TProps & IProcessedSlotProps,
  userProps: ISlotPropRenderFunction<TProps> | (ISlotPropValue<TProps> & IProcessedSlotProps) | undefined,
  defaultStyles: IStyle
) => JSX.Element;

/**
 * Interface for aggregated slots objects used internally by components.
 */
export type ISlots<TSlots> = { [slot in keyof TSlots]: ISlot<TSlots[slot]> };
export type ISlotProps<TProps extends TSlots, TSlots> = { [key in keyof TSlots]: ISlotProp<TProps[key]> };

/**
 * User properties that are automatically applied by Slot utilities using slot name.
 */
export interface IDefaultSlotProps<TSlots> {
  _defaultStyles: IComponentStyles<TSlots>;
}

/**
 * Slot type used for defining Slot props. This interface defines the following slot properties:
 *    1. ISlotPropValue.
 *    2. ISlotRender function.
 */
export type ISlotProp<TProps, TShorthandProp extends keyof TProps | 'children' = never> =
  | ISlotPropValue<TProps, TShorthandProp>
  | ISlotPropRenderFunction<TProps, TShorthandProp>;

/**
 * Slot type used for defining Slot props. This interface defines the following slot properties:
 *    1. Component props object (defined by TProps.)
 *    2. ISlotRender function.
 *    3. Optional shorthand prop, defined by TShorthandProp.
 * The conditional type check looks up prop type in TProps if TShorthandProp is a key of TProps, otherwise it treats
 * TShorthandProp as React children. If TShorthandProp is excluded, there is no default prop and no children are allowed.
 */
export type ISlotPropValue<TProps, TShorthandProp extends keyof TProps | 'children' = never> =
  | TProps
  | (TShorthandProp extends keyof TProps ? TProps[TShorthandProp] : React.ReactNode);

/**
 * Render function interface used by Slot props.
 */
export type ISlotPropRenderFunction<TProps, TShorthandProp extends keyof TProps | 'children' = never> = (
  render: ISlotRenderer<TProps, TShorthandProp>
) => JSX.Element;

/**
 * Render function interface used by Slot props.
 */
export type ISlotRenderer<TProps, TShorthandProp extends keyof TProps | 'children'> = (
  renderContent: ISlotRender<TProps>,
  props?: ISlotPropValue<TProps, TShorthandProp>
) => JSX.Element;

/**
 * Content rendering provided by component.
 */
export type ISlotRender<TProps> = (componentType: React.ReactType<TProps>, props: TProps) => JSX.Element;
