{"INavProps":{"name":"INavProps","propertyName":"INavProps interface","propertyType":1,"property":[{"description":"A collection of link groups to display in the navigation bar","name":"pages","type":" INavPage[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Function callback invoked when a link in the navigation is clicked","name":"onLinkClick","type":" (ev?: React.MouseEvent<{}>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"INavPage":{"name":"INavPage","propertyName":"INavPage interface","propertyType":1,"property":[{"description":"The page's title, as shown in the navigation.","name":"title","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"URL for this page, relative to the site's root.","name":"url","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Unique CSS class name for this page.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The component to render for this page's content.","name":"component","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Loads the component using require.ensure;","name":"getComponent","type":" (cb: (obj: any) => void) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional array of child pages belonging to this one.","name":"pages","type":" INavPage[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether this page should be hidden from the main nav.","name":"isHiddenFromMainNav","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether this is the home page.","name":"isHomePage","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IPropertiesTableSetProps":{"name":"IPropertiesTableSetProps","propertyName":"IPropertiesTableSetProps interface","propertyType":1,"property":[{"description":"Component name, assumes component resides in /components/[name]/ folder\r and properties are at /components/[name]/[name].Props.ts.","name":"componentName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, overrides componentName usage to derive the path to the props.\r Example: 'utilities/focus/'","name":"componentPath","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If specified, will only render interfaces and enums specified here.","name":"renderOnly","type":" Array<string>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A set of pre-resolved source code.","name":"sources","type":" string[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["IBaseProps"]},"ICommandBar":{"name":"ICommandBar","propertyName":"ICommandBar interface","propertyType":1,"property":[{"description":"Sets focus to the active command in the list.","name":"focus()","type":" void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ICommandBarProps":{"name":"ICommandBarProps","propertyName":"ICommandBarProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ICommandBar interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ICommandBar) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Items to render","name":"items","type":" ICommandBarItemProps[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Items to render on the right side (or left, in RTL).","name":"farItems","type":" ICommandBarItemProps[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Default items to have in the overflow menu","name":"overflowItems","type":" ICommandBarItemProps[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to be read by screen readers if there are overflow items and focus is on elipsis button","name":"elipisisAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to be read by screen readers if there are overflow items and focus is on elipsis button","name":"elipisisIconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles to be mixed into individual button styles","name":"buttonStyles","type":" IButtonStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for all non contextual menu buttons.","name":"onRenderButton","type":" (item: ICommandBarItemProps) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom function to reduce data if items do not fit in given space. Return `undefined`\r if no more steps can be taken to avoid infinate loop.","name":"onReduceData","type":" (data: ICommandBarData) => ICommandBarData","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom function to grow data if items are too small for the given space.\r Return `undefined` if no more steps can be taken to avoid infinate loop.","name":"onGrowData","type":" (data: ICommandBarData) => ICommandBarData","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional css class to apply to the command bar","name":"className","type":" string","defaultValue":" undefined\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"ICommandBarItemProps":{"name":"ICommandBarItemProps","propertyName":"ICommandBarItemProps interface","propertyType":1,"property":[{"description":"Remove text when button is not in the overflow","name":"iconOnly","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for individual button","name":"styles","type":" IButtonStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A custom cache key to be used for this item. If cacheKey is changed, the cache will invalidate. Defaults to key value;","name":"cacheKey","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Context under which the item is being rendered\r This value is controlled by the component and useful for adjusting onRender function","name":"renderedInOverflow","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["IContextualMenuItem"]},"IFolderCoverProps":{"name":"IFolderCoverProps","propertyName":"IFolderCoverProps interface","propertyType":1,"property":[{"description":"The breakpoint size of the folder cover.\r\r @type {FolderCoverSize}\r @memberof IFolderCoverProps","name":"folderCoverSize","type":" FolderCoverSize","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The display type of the folder cover.\r\r @type {FolderCoverType}\r @memberof IFolderCoverProps","name":"folderCoverType","type":" FolderCoverType","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the content should be hidden, even if specified.\r Use this to \"fade in\" the content once it is loaded.\r\r @type {boolean}\r @memberof IFolderCoverProps","name":"hideContent","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A signal to display on the folder cover.\r\r @type {(React.ReactNode[] | React.ReactNode)}\r @memberof IFolderCoverProps","name":"signal","type":" React.ReactNode[] | React.ReactNode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A metadata value to display on the folder cover.\r\r @type {(React.ReactNode[] | React.ReactNode)}\r @memberof IFolderCoverProps","name":"metadata","type":" React.ReactNode[] | React.ReactNode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["IBaseProps","React.HTMLAttributes"]},"ITileProps":{"name":"ITileProps","propertyName":"ITileProps interface","propertyType":1,"property":[{"description":"The intended dimensions for the Tile.\r\r @type {ISize}\r @memberof ITileProps","name":"contentSize","type":" ISize","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The breakpoint size for the Tile.\r\r @type {TileSize}\r @memberof ITileProps","name":"tileSize","type":" TileSize","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Index of the item in the selection controller.\r\r @type {number}\r @memberof ITileProps","name":"selectionIndex","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Selection controller for the item rendered in the tile.\r\r @type {ISelection}\r @memberof ITileProps","name":"selection","type":" ISelection","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Name to use on the nameplate for the tile.\r\r @type {(React.ReactNode | React.ReactNode[])}\r @memberof ITileProps","name":"itemName","type":" React.ReactNode | React.ReactNode[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Activity to use on the nameplate for the tile.\r\r @type {(React.ReactNode | React.ReactNode[])}\r @memberof ITileProps","name":"itemActivity","type":" React.ReactNode | React.ReactNode[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Content to render as the full-size background of the tile.\r\r @type {(React.ReactNode | React.ReactNode[])}\r @memberof ITileProps","name":"background","type":" React.ReactNode | React.ReactNode[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to frame the background.\r\r @type {boolean}\r @memberof ITileProps","name":"showBackgroundFrame","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to hide the background, regardless of whether it is present.\r Use this to control when the background \"fades in\" if the content needs to be loaded.\r\r @type {boolean}\r @memberof ITileProps","name":"hideBackground","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Content to render as the foreground of the tile, bounded by padding and the nameplate.\r\r @type {(React.ReactNode | React.ReactNode[])}\r @memberof ITileProps","name":"foreground","type":" React.ReactNode | React.ReactNode[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to frame the foreground.\r\r @type {boolean}\r @memberof ITileProps","name":"showForegroundFrame","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to hide the foreground, regardless of whether it is present.\r Use this to control when the foreground \"fades in\" if the content needs to be loaded.\r\r @type {boolean}\r @memberof ITileProps","name":"hideForeground","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The accessible label for the selection checkbox.\r\r @type {boolean}\r @memberof ITileProps","name":"toggleSelectionAriaLabel","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["IBaseProps","React.AllHTMLAttributes"]},"ITilesGridItem":{"name":"ITilesGridItem","propertyName":"ITilesGridItem<TItem> interface","propertyType":1,"property":[{"description":"A unique key to assign to the item within the grid.\r This is only used for reconciliation, not selection behavior.","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The content item to be rendered. This will be passed back to `onRender`.","name":"content","type":" TItem","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The desired dimensions of the item, used to compute aspect ratio.\r If not provided, this is assumed to be a square equivalent to the current row height.","name":"desiredSize","type":" { width: number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"height","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"","type":"unspecified","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Invoked to render the virtual DOM for the item.\r This content will be rendered inside the cell allocated for the item.","name":"onRender","type":" (content: TItem, finalSize?: ITileSize) => (React.ReactNode | React.ReactNode[])","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ITilesGridSegment":{"name":"ITilesGridSegment","propertyName":"ITilesGridSegment<TItem> interface","propertyType":1,"property":[{"description":"A unique key to assign to the grid segment.\r This will only be used for reconciliation.","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The items to render as part of a contiguous, flowing grid.\r All items will be rendered with the same base row height and margin.","name":"items","type":" ITilesGridItem<TItem>[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The spacing to allocate between items.","name":"spacing","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The base height for each row.","name":"minRowHeight","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The maximum scale factor to use when stretching items to fill a row.","name":"maxScaleFactor","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The mode for the grid.","name":"mode","type":" TilesGridMode","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The top margin for the grid.","name":"marginTop","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The bottom margin for the grid.","name":"marginBottom","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ITileSize":{"name":"ITileSize","propertyName":"ITileSize interface","propertyType":1,"property":[{"description":"","name":"width","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"height","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ITilesListProps":{"name":"ITilesListProps","propertyName":"ITilesListProps<TItem> interface","propertyType":1,"property":[{"description":"An array of items to assign to the list.\r This should be complete and not contain any holes.\r The items may either be header row specifications, or grid specifications which each\r define their own items.","name":"items","type":" (ITilesGridItem<TItem> | ITilesGridSegment<TItem>)[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The desired number of content cells to render per page.","name":"cellsPerPage","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Component ref for the focus zone within the list. Use this to control auto-focus.","name":"focusZoneComponentRef","type":" (focusZone: IFocusZone) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the active element within the list's FocusZone changes.","name":"onActiveElementChanged","type":" (element: HTMLElement) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["IBaseProps","React.Props","React.HTMLAttributes"]},"IActivityItemProps":{"name":"IActivityItemProps","propertyName":"IActivityItemProps interface","propertyType":1,"property":[{"description":"Text describing the activity that occurred and naming the people involved in it.","name":"activityDescriptionText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If onRenderIcon is not, then the persona props in this array will be used as the icon for the this activity item.","name":"activityPersonas","type":" Array<IPersonaProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text of comments or @mention messages.","name":"commentText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Gets ref to component interface.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicated if the compact styling should be used.","name":"isCompact","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer for the description of the current activity.","name":"onRenderActivityDescription","type":" IRenderFunction<IActivityItemProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer that adds the text of a comment below the activity description.","name":"onRenderComments","type":" IRenderFunction<IActivityItemProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer to create the icon next to the activity item.","name":"onRenderIcon","type":" IRenderFunction<IActivityItemProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer adds a time stamp. If not included, timeStamp is shown as plain text below the activity.","name":"onRenderTimeStamp","type":" IRenderFunction<IActivityItemProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional styling for the elements within the Activity Item.","name":"styles","type":" IActivityItemStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text shown as a timestamp on this activity. If not included, no timestamp is shown.","name":"timeStamp","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.AllHTMLAttributes"]},"IActivityItemStyles":{"name":"IActivityItemStyles","propertyName":"IActivityItemStyles interface","propertyType":1,"property":[{"description":"Styles applied to the root activity item container.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the main container of the activity's description.","name":"activityContent","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the persona of the user that did this activity.","name":"activityPersona","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the activity's description.","name":"activityText","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the icon indicating the type of the activity. Only shown when personas are unavailable.","name":"activityTypeIcon","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the text of comments.","name":"commentText","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to personas when two users are involved in a single activity.","name":"doublePersona","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to root in the compact variant.","name":"isCompactRoot","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to personas and icons in the compact variant.","name":"isCompactIcon","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to main text container in the compact variant.","name":"isCompactContent","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to personas in the compact variant.","name":"isCompactPersona","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to a wrapper around personas in the compact variant.","name":"isCompactPersonaContainer","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the container of the persona image or activity type icon.","name":"personaContainer","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles applied to the timestamp at the end of each activity item.","name":"timeStamp","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IBreadcrumb":{"name":"IBreadcrumb","propertyName":"IBreadcrumb interface","propertyType":1,"property":[],"extends":[""]},"IBreadcrumbProps":{"name":"IBreadcrumbProps","propertyName":"IBreadcrumbProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IBreadcrumb interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IBreadcrumb) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Collection of breadcrumbs to render","name":"items","type":" IBreadcrumbItem[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional root classname for the root breadcrumb element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The maximum number of breadcrumbs to display before coalescing.\r If not specified, all breadcrumbs will be rendered.","name":"maxDisplayedItems","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to call when trying to render an item.","name":"onRenderItem","type":" IRenderFunction<IBreadcrumbItem>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to call when reducing the length of the breadcrumb.\r Return undefined to never reduce breadcrumb length","name":"onReduceData","type":" (data: IBreadCrumbData) => IBreadCrumbData | undefined","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label to place on the navigation landmark for breadcrumb","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IBreadcrumbItem":{"name":"IBreadcrumbItem","propertyName":"IBreadcrumbItem interface","propertyType":1,"property":[{"description":"Text to display to the user for the breadcrumb","name":"text","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Arbitrary unique string associated with the breadcrumb","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback issued when the breadcrumb is selected.","name":"onClick","type":" (ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Url to navigate to when this breadcrumb is clicked.","name":"href","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If this breadcrumb item is the item the user is currently on, if set to true, aria-current=\"page\" will be applied to this breadcrumb link","name":"isCurrentItem","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IButton":{"name":"IButton","propertyName":"IButton interface","propertyType":1,"property":[{"description":"Sets focus to the button.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IButtonProps":{"name":"IButtonProps","propertyName":"IButtonProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IButton interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IButton) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, this component will be rendered as an anchor.","name":"href","type":" string","defaultValue":" ElementType.anchor\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Changes the visual presentation of the button to be emphasized (if defined)","name":"primary","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Unique id to identify the item. Typically a duplicate of key value.","name":"uniqueId","type":" string | number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the button is disabled","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styling for individual elements within the button DOM.","name":"styles","type":" IButtonStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the button is checked","name":"checked","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, additional class name to provide on the root element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria label of the button for the benefit of screen readers.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Detailed description of the button for the benefit of screen readers.\r\r Besides the compound button, other button types will need more information provided to screen reader.","name":"ariaDescription","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to render button label. If text is supplied, it will override any string in button children. Other children components will be passed through after the text.","name":"text","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The props for the icon shown in the button.","name":"iconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding\r how the default icon looks. Providing this in addition of onClick and setting the split property to true will render a SplitButton.","name":"menuProps","type":" IContextualMenuProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton. Defaults to false.","name":"split","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The props for the icon shown when providing a menu dropdown.","name":"menuIconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for the icon","name":"onRenderIcon","type":" IRenderFunction<IButtonProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for the label text.","name":"onRenderText","type":" IRenderFunction<IButtonProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for the desciption text.","name":"onRenderDescription","type":" IRenderFunction<IButtonProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for the aria description element.","name":"onRenderAriaDescription","type":" IRenderFunction<IButtonProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for rendering the button children.","name":"onRenderChildren","type":" IRenderFunction<IButtonProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for button menu icon","name":"onRenderMenuIcon","type":" IRenderFunction<IButtonProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for button menu","name":"onRenderMenu","type":" IRenderFunction<IContextualMenuProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Description of the action this button takes.\r Only used for compound buttons","name":"description","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v1.2.3, to be removed at >= v2.0.0. Use specific button component instead","name":"buttonType","type":" ButtonType","defaultValue":" ButtonType.default\r","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Deprecated at v0.56.2, to be removed at >= v1.0.0. Just pass in button props instead;\r they will be mixed into the button/anchor element rendered by the component.","name":"rootProps","type":" React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Deprecated on 4/15/2017, use iconProps={ { iconName: 'Emoji2' } }.","name":"icon","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Deprecated on 4/15/2017, use menuIconProps={ { iconName: 'Emoji2' } }.","name":"menuIconName","type":" IconName | string | null","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Deprecated on 5/26/2016, use checked.","name":"toggled","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Any custom data the developer wishes to associate with the menu item.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.AllHTMLAttributes"]},"ElementType":{"name":"ElementType","propertyName":"ElementType enum","propertyType":0,"property":[{"description":"<button> element.","name":"button"},{"description":"<a> element.","name":"anchor"}],"extends":[""]},"ButtonType":{"name":"ButtonType","propertyName":"ButtonType enum","propertyType":0,"property":[{"description":"","name":"normal"},{"description":"","name":"primary"},{"description":"","name":"hero"},{"description":"","name":"compound"},{"description":"","name":"command"},{"description":"","name":"icon"},{"description":"","name":"default"}],"extends":[""]},"IButtonStyles":{"name":"IButtonStyles","propertyName":"IButtonStyles interface","propertyType":1,"property":[{"description":"Style for the root element in the default enabled, non-toggled state.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the root element in a checked state, layered on top of the root style.","name":"rootChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the root element in a disabled state, layered on top of the root style.","name":"rootDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on hover in the default, enabled, non-toggled state.","name":"rootHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on hover in the default, enabled, non-toggled state.","name":"rootFocused","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on pressed in the default, enabled, non-toggled state.","name":"rootPressed","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on when menu is expanded in the default, enabled, non-toggled state.","name":"rootExpanded","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on hover in a checked, enabled state","name":"rootCheckedHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on pressed in a checked, enabled state","name":"rootCheckedPressed","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on hover in a checked, disabled state","name":"rootCheckedDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override applied to the root on hover in a expanded state on hover","name":"rootExpandedHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the flexbox container within the root element.","name":"flexContainer","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the icon on the near side of the label.","name":"icon","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the icon on the near side of the label on hover.","name":"iconHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the icon on the near side of the label when pressed.","name":"iconPressed","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the icon on the near side of the label when expanded.","name":"iconExpanded","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the icon on the near side of the label when expanded and hovered.","name":"iconExpandedHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the icon when the button is disabled.","name":"iconDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the icon when the button is checked.","name":"iconChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the text content of the button.","name":"label","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the text content when the button is disabled.","name":"labelDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the text content when the button is checked.","name":"labelChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the menu chevron.","name":"menuIcon","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the menu chevron when the button is disabled.","name":"menuIconDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the menu chevron when the button is checked.","name":"menuIconChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the description text if applicable (for compound buttons.)","name":"description","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the description text when the button is hovered.","name":"descriptionHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the description text when the button is pressed.","name":"descriptionPressed","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the description text when the button is disabled.","name":"descriptionDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the description text when the button is checked.","name":"descriptionChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the screen reader text.","name":"screenReaderText","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the container div around a SplitButton element","name":"splitButtonContainer","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the container div around a SplitButton element in a disabled state","name":"splitButtonContainerDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the divider element that appears between the button and menu button\r for a split button.","name":"splitButtonDivider","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton menu button","name":"splitButtonMenuButton","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton menu button element in a disabled state.","name":"splitButtonMenuButtonDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton menu button element in a checked state","name":"splitButtonMenuButtonChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton menu button element in an expanded state","name":"splitButtonMenuButtonExpanded","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton menu icon element","name":"splitButtonMenuIcon","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton menu icon element in a disabled state","name":"splitButtonMenuIconDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the SplitButton FlexContainer.","name":"splitButtonFlexContainer","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ICalendar":{"name":"ICalendar","propertyName":"ICalendar interface","propertyType":1,"property":[{"description":"Sets focus to the selected date.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ICalendarProps":{"name":"ICalendarProps","propertyName":"ICalendarProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ICalendar interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ICalendar) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when a date is selected\r @param date - The date the user selected\r @param selectedDateRangeArray - The resultant list of dates that are selected based on the date range type set for the component.","name":"onSelectDate","type":" (date: Date, selectedDateRangeArray?: Date[]) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when calendar is closed","name":"onDismiss","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the month picker is shown beside the day picker or hidden.","name":"isMonthPickerVisible","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the day picker is shown beside the month picker or hidden.","name":"isDayPickerVisible","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Show month picker on top of date picker when visible.","name":"showMonthPickerAsOverlay","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Value of today. If null, current time in client machine will be used.","name":"today","type":" Date","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Default value of the Calendar, if any","name":"value","type":" Date","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The first day of the week for your locale.","name":"firstDayOfWeek","type":" DayOfWeek","defaultValue":" DayOfWeek.Sunday\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The date range type indicating how  many days should be selected as the user\r selects days","name":"dateRangeType","type":" DateRangeType","defaultValue":"Value DateRangeType.Day\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the month view should automatically navigate to the next or previous date range\r depending on the selected date. If this property is set to true and the currently displayed\r month is March 2017, if the user clicks on a day outside the month, i.e., April 1st, the\r picker will automatically navigate to the month of April.","name":"autoNavigateOnSelection","type":" boolean","defaultValue":"Value false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the \"Go to today\" link should be shown or not","name":"showGoToToday","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This property has been removed at 0.80.0 in place of the focus method, to be removed @ 1.0.0.","name":"shouldFocusOnMount","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Localized strings to use in the Calendar","name":"strings","type":" ICalendarStrings | null","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Whether the month picker should highlight the current month","name":"highlightCurrentMonth","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Customize navigation icons using ICalendarIconStrings","name":"navigationIcons","type":" ICalendarIconStrings","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the calendar should show the week number (weeks 1 to 53) before each week row","name":"showWeekNumbers","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Apply additional formating to dates, for example localized date formatting.","name":"dateTimeFormatter","type":" ICalendarFormatDateCallbacks","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"ICalendarStrings":{"name":"ICalendarStrings","propertyName":"ICalendarStrings interface","propertyType":1,"property":[{"description":"An array of strings for the full names of months.\r The array is 0-based, so months[0] should be the full name of January.","name":"months","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An array of strings for the short names of months.\r The array is 0-based, so shortMonths[0] should be the short name of January.","name":"shortMonths","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An array of strings for the full names of days of the week.\r The array is 0-based, so days[0] should be the full name of Sunday.","name":"days","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An array of strings for the initials of the days of the week.\r The array is 0-based, so days[0] should be the initial of Sunday.","name":"shortDays","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"String to render for button to direct the user to today's date.","name":"goToToday","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Aria-label for the \"previous month\" button.","name":"prevMonthAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"next month\" button.","name":"nextMonthAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"previous year\" button.","name":"prevYearAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"next year\" button.","name":"nextYearAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ICalendarIconStrings":{"name":"ICalendarIconStrings","propertyName":"ICalendarIconStrings interface","propertyType":1,"property":[{"description":"FabricMDL2Icons name for the left navigation icon.  Previous default: ChevronLeft.","name":"leftNavigation","type":" string","defaultValue":"  'Up'\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"FabricMDL2Icons name for the right navigation icon.  Previous default: ChevronRight.","name":"rightNavigation","type":" string","defaultValue":"  'Down'\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ICalendarFormatDateCallbacks":{"name":"ICalendarFormatDateCallbacks","propertyName":"ICalendarFormatDateCallbacks interface","propertyType":1,"property":[{"description":"Callback to apply formatting to mmmm d, yyyy formated dates","name":"formatMonthDayYear","type":" (date: Date, strings?: ICalendarStrings) => string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback to apply formatting to the month and year in the Day Picker header","name":"formatMonthYear","type":" (date: Date, strings?: ICalendarStrings) => string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback to apply formatting to the days in the Day Picker calendar","name":"formatDay","type":" (date: Date) => string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback to apply formatting to the year in the Month Picker header","name":"formatYear","type":" (date: Date) => string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ICallout":{"name":"ICallout","propertyName":"ICallout interface","propertyType":1,"property":[],"extends":[""]},"ICalloutProps":{"name":"ICalloutProps","propertyName":"ICalloutProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ICallout interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ICallout) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The target that the Callout should try to position itself based on.\r It can be either an HTMLElement a querySelector string of a valid HTMLElement\r or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.","name":"target","type":" HTMLElement | string | MouseEvent","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the element should be positioned","name":"directionalHint","type":" DirectionalHint","defaultValue":" DirectionalHint.BottomAutoEdge\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the element should be positioned in RTL layouts.\r If not specified, a mirror of `directionalHint` will be used instead","name":"directionalHintForRTL","type":" DirectionalHint","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The gap between the Callout and the target","name":"gapSpace","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The width of the beak.","name":"beakWidth","type":" number","defaultValue":" 16\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom width for callout including borders. If value is 0, no width is applied.","name":"calloutWidth","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The background color of the Callout in hex format ie. #ffffff.","name":"backgroundColor","type":" string","defaultValue":" $ms-color-white\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The bounding rectangle for which  the contextual menu can appear in.","name":"bounds","type":" IRectangle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The minimum distance the callout will be away from the edge of the screen.","name":"minPagePadding","type":" number","defaultValue":" 8\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true use a point rather than rectangle to position the Callout.\r For example it can be used to position based on a click.","name":"useTargetPoint","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Point used to position the Callout","name":"targetPoint","type":" IPoint","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true then the beak is visible. If false it will not be shown.","name":"isBeakVisible","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true then the onClose will not not dismiss on scroll","name":"preventDismissOnScroll","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true the position returned will have the menu element cover the target.\r If false then it will position next to the target;","name":"coverTarget","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria role assigned to the callout (Eg. dialog, alertdialog).","name":"role","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Accessible label text for callout.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines the element id referencing the element containing label text for callout.","name":"ariaLabelledBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines the element id referencing the element containing the description for the callout.","name":"ariaDescribedBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"CSS class to apply to the callout.","name":"className","type":" string","defaultValue":" null\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback when the layer content has mounted.","name":"onLayerMounted","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback that is called once the callout has been correctly positioned.","name":"onPositioned","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when the Callout tries to close.","name":"onDismiss","type":" (ev?: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true do not render on a new layer. If false render on a new layer.","name":"doNotLayer","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true the position will not change sides in an attempt to fit the callout within bounds.\r It will still attempt to align it to whatever bounds are given.","name":"directionalHintFixed","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Specify the final height of the content.\r To be used when expanding the content dynamically so that callout can adjust its position.","name":"finalHeight","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true then the callout will attempt to focus the first focusable element that it contains.\r If it doesn't find an element, no focus will be set and the method will return false.\r This means that it's the contents responsibility to either set focus or have\r focusable items.\r @returns True if focus was set, false if it was not.","name":"setInitialFocus","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.59.1, to be removed at >= v1.0.0. Pass in a beakWidth to dictate size.","name":"beakStyle","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Deprecated at v0.72.1 and will no longer exist after 1.0 use target instead.","name":"targetElement","type":" HTMLElement","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":["React.Props"]},"ICheckbox":{"name":"ICheckbox","propertyName":"ICheckbox interface","propertyType":1,"property":[{"description":"Gets the current checked state.","name":"checked","type":" boolean","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets focus to the checkbox.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["ICheckboxTest"]},"ICheckboxProps":{"name":"ICheckboxProps","propertyName":"ICheckboxProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ICheckbox interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ICheckbox) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional class name to provide on the root element, in addition to the ms-Checkbox class.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Checked state. Mutually exclusive to \"defaultChecked\". Use this if you control the checked state at a higher\r level and plan to pass in the correct value based on handling onChange events and re-rendering.","name":"checked","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Default checked state. Mutually exclusive to \"checked\". Use this if you want an uncontrolled component, and\r want the Checkbox instance to maintain its own state.","name":"defaultChecked","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Label to display next to the checkbox.","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Disabled state of the checkbox.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback that is called when the checked value has changed.","name":"onChange","type":" (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional input props that will be mixed into the input element, *before* other props are applied. This allows\r you to extend the input element with additional attributes, such as data-automation-id needed for automation.\r Note that if you provide, for example, \"disabled\" as well as \"inputProps.disabled\", the former will take\r precedence over the later.","name":"inputProps","type":" React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Allows you to set the checkbox to be at the before (start) or after (end) the label.","name":"boxSide","type":" 'start' | 'end'","defaultValue":" 'start'\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Accessible label for the checkbox.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ID for element that contains label information for the checkbox.","name":"ariaLabelledBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ID for element that provides extended information for the checkbox.","name":"ariaDescribedBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for this component","name":"styles","type":" ICheckboxStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for the label.","name":"onRenderLabel","type":" IRenderFunction<ICheckboxProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.ButtonHTMLAttributes"]},"ICheckboxStyles":{"name":"ICheckboxStyles","propertyName":"ICheckboxStyles interface","propertyType":1,"property":[{"description":"Style for the root element (a button) of the checkbox component in the default enabled/unchecked state.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the label part (contains the customized checkbox + text) when enabled.","name":"label","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the label when reversed","name":"labelReversed","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the label part when disabled.","name":"labelDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for checkbox in its default unchecked/enabled state.","name":"checkbox","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkbox when enabled/unchecked/hovered.","name":"checkboxHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkbox when enabled/checked.","name":"checkboxChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkbox when enabled/checked/hovered.","name":"checkboxCheckedHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkbox when disabled/unchecked.","name":"checkboxDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkbox when disabled/checked.","name":"checkboxCheckedDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the checkmark in the default enabled/unchecked state.","name":"checkmark","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the checkmark when enabled/checked.","name":"checkmarkChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkmark when disabled/unchecked.","name":"checkmarkDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for checkmark when disabled/checked.","name":"checkmarkCheckedDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for text appearing with the checkbox in its default enabled state.","name":"text","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for text appearing with the checkbox when enabled/hovered.","name":"textHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for text appearing with the checkbox when disabled.","name":"textDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ICheckboxTest":{"name":"ICheckboxTest","propertyName":"ICheckboxTest interface","propertyType":1,"property":[{"description":"Gets the current checked state.","name":"testttprop","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets the number of apples.","name":"appleprop","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IChoiceGroup":{"name":"IChoiceGroup","propertyName":"IChoiceGroup interface","propertyType":1,"property":[],"extends":[""]},"IChoiceGroupProps":{"name":"IChoiceGroupProps","propertyName":"IChoiceGroupProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IChoiceGroup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The options for the choice group.","name":"options","type":" IChoiceGroupOption[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The key of the option that will be initially checked.","name":"defaultSelectedKey","type":" string | number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The key of the selected option. If you provide this, you must maintain selection\r state by observing onChange events and passing a new value in when changed.","name":"selectedKey","type":" string | number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for receiving a notification when the choice has been changed.","name":"onChange","type":" (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Descriptive label for the choice group.","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated and will be removed by 07/17/2017 Use 'onChange' instead.","name":"onChanged","type":" (option: IChoiceGroupOption, evt?: React.FormEvent<HTMLElement | HTMLInputElement>) => void","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":["React.InputHTMLAttributes"]},"IChoiceGroupOption":{"name":"IChoiceGroupOption","propertyName":"IChoiceGroupOption interface","propertyType":1,"property":[{"description":"A required key to uniquely identify the option.","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The text string for the option.","name":"text","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional override of option render","name":"onRenderField","type":" IRenderFunction<IChoiceGroupOption>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional override of option render","name":"onRenderLabel","type":" (option: IChoiceGroupOption) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The Icon component props for choice field","name":"iconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The src of image for choice field.","name":"imageSrc","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The src of image for choice field which is selected.","name":"selectedImageSrc","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The width and height of the image in px for choice field.","name":"imageSize","type":" { width: number, height: number }","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the option is disabled.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This value is maintained by the component and is accessible during onRenderField","name":"checked","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This value is maintained by the component and is accessible during onRenderField","name":"id","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This value is maintained by the component and is accessible during onRenderField","name":"labelId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IColorPickerProps":{"name":"IColorPickerProps","propertyName":"IColorPickerProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The CSS-compatible string to describe the color","name":"color","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback issued when the user changes the color.","name":"onColorChanged","type":" (color: string) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The setting of whether hide alpha control slider.","name":"alphaSliderHidden","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IComboBox":{"name":"IComboBox","propertyName":"IComboBox interface","propertyType":1,"property":[{"description":"Sets focus to the input in the comboBox\r @returns True if focus could be set, false if no operation was taken.","name":"focus()","type":" boolean","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IComboBoxOption":{"name":"IComboBoxOption","propertyName":"IComboBoxOption interface","propertyType":1,"property":[{"description":"Specific styles for each comboBox option. If you intend to give\r common styles to all comboBox option please use\r the prop comboBoxOptionStyles","name":"styles","type":" Partial<IComboBoxOptionStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["ISelectableOption"]},"IComboBoxProps":{"name":"IComboBoxProps","propertyName":"IComboBoxProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IComboBox interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IComboBox) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Collection of options for this ComboBox","name":"options","type":" IComboBoxOption[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback issues when either:\r 1) the selected option changes\r 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform is also true\r    (and hence only value would be true, the other parameter would be null in this case)","name":"onChanged","type":" (option?: IComboBoxOption, index?: number, value?: string) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when the options should be resolved, if they have been updated or\r if they need to be passed in the first time","name":"onResolveOptions","type":" (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to false.","name":"allowFreeform","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from the list of options. If\r the combo box is expanded, this will also scroll to the suggested option, and give it a selected style. Defaults to false.","name":"autoComplete","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Value to show in the input, does not have to map to a combobox option","name":"value","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The IconProps to use for the button aspect of the combobox","name":"buttonIconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for this component","name":"styles","type":" Partial<IComboBoxStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Styles for the caret down button.","name":"caretDownButtonStyles","type":" Partial<IButtonStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Default styles that should be applied to ComboBox options,\r in case an option does not come with user-defined custom styles","name":"comboBoxOptionStyles","type":" Partial<IComboBoxOptionStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["ISelectableDroppableTextProps"]},"IComboBoxStyles":{"name":"IComboBoxStyles","propertyName":"IComboBoxStyles interface","propertyType":1,"property":[{"description":"Style for the container which has the ComboBox and the label","name":"container","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style for the label element of the ComboBox.","name":"label","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Base styles for the root element of all ComboBoxes.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for the root element for variant of ComboBox with an errorMessage in the props.","name":"rootError","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for variant of ComboBox where allowFreeForm is false in the props.","name":"rootDisallowFreeForm","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for when the ComboBox is hovered. These styles are applied for all comboBoxes except when\r the comboBox is disabled.","name":"rootHovered","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for when the ComboBox is focused. These styles are applied for all comboBoxes except when\r the comboBox is disabled.","name":"rootFocused","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for when the comboBox is disabled. These styles override all the other styles.\r NOTE : Hover (or) Focused (or) active styles are not applied for disabled comboBoxes.","name":"rootDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Base styles for the input element - which contains the currently selected\r option.","name":"input","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override for the input element when comboBox is disabled.","name":"inputDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for the error Message text of the comboBox.","name":"errorMessage","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for the callout.","name":"callout","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for the container of all the Combobox options\r Includes the headers and dividers.","name":"optionsContainer","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for a header in the options.","name":"header","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for a divider in the options.","name":"divider","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IComboBoxOptionStyles":{"name":"IComboBoxOptionStyles","propertyName":"IComboBoxOptionStyles interface","propertyType":1,"property":[{"description":"Styles for the text inside the comboBox option.\r This should be used instead of the description\r inside IButtonStyles because we custom render the text\r in the comboBox options.","name":"optionText","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["IButtonStyles"]},"ContextualMenuItemType":{"name":"ContextualMenuItemType","propertyName":"ContextualMenuItemType enum","propertyType":0,"property":[{"description":"","name":"Normal"},{"description":"","name":"Divider"},{"description":"","name":"Header"},{"description":"","name":"Section"}],"extends":[""]},"IContextualMenu":{"name":"IContextualMenu","propertyName":"IContextualMenu interface","propertyType":1,"property":[],"extends":[""]},"IContextualMenuProps":{"name":"IContextualMenuProps","propertyName":"IContextualMenuProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IContextualMenu) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The target that the ContextualMenu should try to position itself based on.\r It can be either an HTMLElement a querySelector string of a valid HTMLElement\r or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.","name":"target","type":" HTMLElement | string | MouseEvent","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at version 0.72.1 and will no longer exist after 1.0 use 'target' instead.","name":"targetElement","type":" HTMLElement","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"How the element should be positioned","name":"directionalHint","type":" DirectionalHint","defaultValue":" DirectionalHint.bottomAutoEdge\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the element should be positioned in RTL layouts.\r If not specified, a mirror of `directionalHint` will be used instead","name":"directionalHintForRTL","type":" DirectionalHint","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The gap between the ContextualMenu and the target","name":"gapSpace","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The width of the beak.","name":"beakWidth","type":" number","defaultValue":" 16\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true the context menu will render as the same width as the target element","name":"useTargetWidth","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The bounding rectangle for which the contextual menu can appear in.","name":"bounds","type":" IRectangle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true use a point rather than rectangle to position the ContextualMenu.\r For example it can be used to position based on a click.","name":"useTargetPoint","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Point used to position the ContextualMenu","name":"targetPoint","type":" IPoint","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true then the beak is visible. If false it will not be shown.","name":"isBeakVisible","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true the position returned will have the menu element cover the target.\r If false then it will position next to the target;","name":"coverTarget","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Collection of menu items.","name":"items","type":" IContextualMenuItem[]","defaultValue":" []\r","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Aria Labelled by labelElementId","name":"labelElementId","type":" string","defaultValue":" null\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether to focus on the menu when mounted.","name":"shouldFocusOnMount","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when the ContextualMenu tries to close. If dismissAll is true then all\r submenus will be dismissed.","name":"onDismiss","type":" (ev?: any, dismissAll?: boolean) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Click handler which is invoked if onClick is not passed for individual contextual\r menu item","name":"onItemClick","type":" (ev?: React.MouseEvent<HTMLElement>, item?: IContextualMenuItem) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"CSS class to apply to the context menu.","name":"className","type":" string","defaultValue":" null\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether this menu is a submenu of another menu or not.","name":"isSubMenu","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"DOM id to tag the ContextualMenu with, for reference.\r Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes.","name":"id","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label for accessibility for the ContextualMenu.\r If none specified no aria label will be applied to the ContextualMenu.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true do not render on a new layer. If false render on a new layer.","name":"doNotLayer","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Direction for arrow navigation of the ContextualMenu. Should only be specified if using custom-rendered menu items.","name":"arrowDirection","type":" FocusZoneDirection","defaultValue":" FocusZoneDirection.vertical\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true the position will not change sides in an attempt to fit the ContextualMenu within bounds.\r It will still attempt to align it to whatever bounds are given.","name":"directionalHintFixed","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the contextualmenu has been opened.","name":"onMenuOpened","type":" (contextualMenu?: IContextualMenuProps) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Pass in custom callout props","name":"calloutProps","type":" ICalloutProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional title to be displayed on top of the menu.","name":"title","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styling for the contextual menu.","name":"styles","type":" IContextualMenuStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to call when trying to render a submenu.","name":"onRenderSubMenu","type":" IRenderFunction<IContextualMenuProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props","IWithResponsiveModeState"]},"IContextualMenuItem":{"name":"IContextualMenuItem","propertyName":"IContextualMenuItem interface","propertyType":1,"property":[{"description":"Unique id to identify the item","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Text description for the menu item to display","name":"name","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"itemType","type":" ContextualMenuItemType","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Props that go to the IconComponent","name":"iconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Props that go to the IconComponent used for the chevron.","name":"submenuIconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.69.0 and will no longer exist after 1.0 use IconProps instead.","name":"icon","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Whether the menu item is disabled","name":"disabled","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.65.1 and will be removed by v 1.0. Use 'disabled' instead.","name":"isDisabled","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"[TODO] Not Yet Implemented","name":"shortCut","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not this menu item can be checked","name":"canCheck","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not this menu item is currently checked.","name":"checked","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v.65.1 and will be removed by v 1.0. Use 'checked' instead.","name":"isChecked","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Any custom data the developer wishes to associate with the menu item.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when the menu item is invoked","name":"onClick","type":" (ev?: React.MouseEvent<HTMLElement>, item?: IContextualMenuItem) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An optional URL to navigate to upon selection","name":"href","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An optional target when using href","name":"target","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v.80.0 and will be removed by v 1.0. Use 'subMenuProps' instead.","name":"items","type":" IContextualMenuItem[]","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Properties to apply to a submenu to this item.\r The ContextualMenu will provide default values for 'target', 'onDismiss', 'isSubMenu',\r  'id', 'shouldFocusOnMount', 'directionalHint', 'className', and 'gapSpace', all of which\r  can be overridden.","name":"subMenuProps","type":" IContextualMenuProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Properties to apply to render this item as a section.\r  This prop is mutually exclusive with subMenuProps.","name":"sectionProps","type":" IContextualMenuSection","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional css class to apply to the menu item","name":"className","type":" string","defaultValue":" undefined\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional styles to apply to the menu item","name":"style","type":" React.CSSProperties","defaultValue":" undefined\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional accessibility label (aria-label) attribute that will be stamped on to the element.\r If none is specified, the aria-label attribute will contain the item name","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional title for displaying text when hovering over an item.","name":"title","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to custom render this menu item.\r For keyboard accessibility, the top-level rendered item should be a focusable element\r (like an anchor or a button) or have the `data-is-focusable` property set to true.","name":"onRender","type":" (item: any) => React.ReactNode","defaultValue":" undefined\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A function to be executed onMouseDown. This is executed before an onClick event and can\r be used to interrupt native on click events as well. The click event should still handle\r the commands. This should only be used in special cases when react and non-react are mixed.","name":"onMouseDown","type":" (item: IContextualMenuItem, event: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional override for the role attribute on the menu button. If one is not provided, it will\r have a value of menuitem or menuitemcheckbox.","name":"role","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Any additional properties to use when custom rendering menu items.","name":"[propertyName","type":" string]: any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IContextualMenuSection":{"name":"IContextualMenuSection","propertyName":"IContextualMenuSection interface","propertyType":1,"property":[{"description":"The items to include inside the section.","name":"items","type":" IContextualMenuItem[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The optional section title.","name":"title","type":" IContextualMenuItem","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set to true, the section will display a divider at the top of the section.","name":"topDivider","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set to true, the section will display a divider at the bottom of the section.","name":"bottomDivider","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IContextualMenuStyles":{"name":"IContextualMenuStyles","propertyName":"IContextualMenuStyles interface","propertyType":1,"property":[{"description":"Style override for the contextual menu title.","name":"title","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IDatePicker":{"name":"IDatePicker","propertyName":"IDatePicker interface","propertyType":1,"property":[],"extends":[""]},"IDatePickerProps":{"name":"IDatePickerProps","propertyName":"IDatePickerProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IDatePicker interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IDatePicker) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when a date is selected","name":"onSelectDate","type":" (date: Date | null | undefined) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Label for the DatePicker","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the DatePicker is a required field or not","name":"isRequired","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Disabled state of the DatePicker.","name":"disabled","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria Label for TextField of the DatePicker for screen reader users.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label for date picker popup for screen reader users.","name":"pickerAriaLabel","type":" string","defaultValue":" Calendar\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the month picker is shown beside the day picker or hidden.","name":"isMonthPickerVisible","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the DatePicker allows input a date string directly or not","name":"allowTextInput","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the DatePicker should open automatically when the control is focused","name":"disableAutoFocus","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Placeholder text for the DatePicker","name":"placeholder","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Default value of the DatePicker, if any","name":"value","type":" Date","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional method to format the chosen date to a string to display in the DatePicker","name":"formatDate","type":" (date: Date) => string","defaultValue":" date.toString()\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional method to parse the text input value to date, it is only useful when allowTextInput is set to true","name":"parseDateFromString","type":" (dateStr: string) => Date | null","defaultValue":" new Date(Date.parse(dateStr))\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The first day of the week for your locale.","name":"firstDayOfWeek","type":" DayOfWeek","defaultValue":" DayOfWeek.Sunday\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Localized strings to use in the DatePicker","name":"strings","type":" IDatePickerStrings","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if DatePicker has a border.","name":"borderless","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional Classname for datepicker root element .","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IDatePickerStrings":{"name":"IDatePickerStrings","propertyName":"IDatePickerStrings interface","propertyType":1,"property":[{"description":"An array of strings for the full names of months.\r The array is 0-based, so months[0] should be the full name of January.","name":"months","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An array of strings for the short names of months.\r The array is 0-based, so shortMonths[0] should be the short name of January.","name":"shortMonths","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An array of strings for the full names of days of the week.\r The array is 0-based, so days[0] should be the full name of Sunday.","name":"days","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An array of strings for the initials of the days of the week.\r The array is 0-based, so days[0] should be the initial of Sunday.","name":"shortDays","type":" string[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"String to render for button to direct the user to today's date.","name":"goToToday","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Error message to render for TextField if isRequired validation fails.","name":"isRequiredErrorMessage","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Error message to render for TextField if input date string parsing fails.","name":"invalidInputErrorMessage","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"previous month\" button.","name":"prevMonthAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"next month\" button.","name":"nextMonthAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"previous year\" button.","name":"prevYearAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria-label for the \"next year\" button.","name":"nextYearAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IDetailsList":{"name":"IDetailsList","propertyName":"IDetailsList interface","propertyType":1,"property":[{"description":"Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\r still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\r call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.","name":"forceUpdate","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["IList"]},"IDetailsListProps":{"name":"IDetailsListProps","propertyName":"IDetailsListProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IDetailsList interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IDetailsList) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes.","name":"setKey","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The items to render.","name":"items","type":" any[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional properties to pass through to the list components being rendered.","name":"listProps","type":" IListProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional default focused index to set focus to once the items have rendered and the index exists.","name":"initialFocusedIndex","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name to add to the root element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional grouping instructions. The definition for IGroup can be found under the GroupedList component.","name":"groups","type":" IGroup[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional override properties to render groups. The definition for IGroupRenderProps can be found under the GroupedList component.","name":"groupProps","type":" IGroupRenderProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional selection model to track selection state.","name":"selection","type":" ISelection","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Controls how/if the details list manages selection.","name":"selectionMode","type":" SelectionMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"By default, selection is cleared when clicking on an empty (non-focusable) section of the screen. Setting this value to true\r overrides that behavior and maintains selection.","name":"selectionPreservedOnEmptyClick","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Controls how the columns are adjusted.","name":"layoutMode","type":" DetailsListLayoutMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Controls the visibility of selection check box.","name":"checkboxVisibility","type":" CheckboxVisibility","defaultValue":" CheckboxVisibility.onHover\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Controls the visibility of the details header.","name":"isHeaderVisible","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Given column defitions. If none are provided, default columns will be created based on the item's properties.","name":"columns","type":" IColumn[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Controls how the list contrains overflow.","name":"constrainMode","type":" ConstrainMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Event names and corresponding callbacks that will be registered to rendered row elements.","name":"rowElementEventMap","type":" { eventName: string, callback: (context: IDragDropContext, event?: any) => void }[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the details list has been updated. Useful for telemetry tracking externally.","name":"onDidUpdate","type":" (detailsList?: DetailsList) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.","name":"onRowDidMount","type":" (item?: any, index?: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when a given row has been mounted. Useful for identifying when a row has been removed from the page.","name":"onRowWillUnmount","type":" (item?: any, index?: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the user clicks on the column header.","name":"onColumnHeaderClick","type":" (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the user asks for a contextual menu (usually via right click) from a column header.","name":"onColumnHeaderContextMenu","type":" (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback fired on column resize","name":"onColumnResize","type":" (column?: IColumn, newWidth?: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when a given row has been invoked (by pressing enter while it is selected.)","name":"onItemInvoked","type":" (item?: any, index?: number, ev?: Event) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the context menu of an item has been accessed.","name":"onItemContextMenu","type":" (item?: any, index?: number, ev?: Event) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, will allow the caller to override the default row rendering.","name":"onRenderRow","type":" IRenderFunction<IDetailsRowProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, will be the \"default\" item column renderer method. This affects cells within the rows; not the rows themselves.\r If a column definition provides its own onRender method, that will be used instead of this.","name":"onRenderItemColumn","type":" (item?: any, index?: number, column?: IColumn) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Map of callback functions related to drag and drop functionality.","name":"dragDropEvents","type":" IDragDropEvents","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for what to render when the item is missing.","name":"onRenderMissingItem","type":" (index?: number) => React.ReactNode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An override to render the details header.","name":"onRenderDetailsHeader","type":" IRenderFunction<IDetailsHeaderProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Viewport, provided by the withViewport decorator.","name":"viewport","type":" IViewport","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it with keyboard.","name":"onActiveItemChanged","type":" (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria-label attribute to stamp out on the list header","name":"ariaLabelForListHeader","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria-label attribute to stamp out on select all checkbox for the list","name":"ariaLabelForSelectAllCheckbox","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An ARIA label for the name of the selection column, for localization.","name":"ariaLabelForSelectionColumn","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback to get the aria-label string for a given item.","name":"getRowAriaLabel","type":" (item: any) => string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback to get the item key, to be used in the selection and on render.","name":"getKey","type":" (item: any, index?: number) => string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A text summary of the table set via aria-label.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Check button aria label for details list.","name":"checkButtonAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label for grid in details list.","name":"ariaLabelForGrid","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Boolean value to indicate if the role application should be applied on details list. Set to false by default","name":"shouldApplyApplicationRole","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The minimum mouse move distance to interpret the action as drag event.","name":"minimumPixelsForDrag","type":" number","defaultValue":"Value 5\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Boolean value to indicate if the component should render in compact mode. Set to false by default","name":"compact","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Boolean value to enable render page caching. This is an experimental performance optimization\r that is off by default.","name":"usePageCache","type":" boolean","defaultValue":"Value false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback to determine whether the list should be rendered in full, or virtualized.\r Virtualization will add and remove pages of items as the user scrolls them into the visible range.\r This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\r The default implementation will virtualize when this callback is not provided.","name":"onShouldVirtualize","type":" (props: IListProps) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props","IWithViewportProps"]},"IColumn":{"name":"IColumn","propertyName":"IColumn interface","propertyType":1,"property":[{"description":"A unique key for identifying the column.","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Name to render on the column header.","name":"name","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The field to pull the text value from for the column. This can be null if a custom\r onRender method is provided.","name":"fieldName","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"An optional class name to stick on the column cell within each row.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Minimum width for the column.","name":"minWidth","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional accessibility label (aria-label) attribute that will be stamped on to the element.\r If none is specified, the arai-label attribute will contain the column name","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag on whether the column is a header for the given row. There should be only one column with\r row header set to true.","name":"isRowHeader","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Maximum width for the column, if stretching is allowed in justified scenarios.","name":"maxWidth","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines how the column's header should render.","name":"columnActionsMode","type":" ColumnActionsMode","defaultValue":" ColumnActionsMode.clickable ","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional iconName to use for the column header.","name":"iconName","type":" IconName","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not only the icon is used in the column header.\r Set this to true so the column name and dropdown chevron are not displayed.","name":"isIconOnly","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Class name to add to the Icon component.","name":"iconClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If specified will allow the column to be collapsed when rendered in justified layout.","name":"isCollapsable","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the column is currently sorted. Renders a sort arrow in the column header.","name":"isSorted","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the arrow is pointed down (descending) or up.","name":"isSortedDescending","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the column can be resized.","name":"isResizable","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the column can render multi-line text.","name":"isMultiline","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided uses this method to render custom cell content, rather than the default text rendering.","name":"onRender","type":" (item?: any, index?: number, column?: IColumn) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the column is filtered, and if so shows a filter icon.","name":"isFiltered","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, will be executed when the user clicks on the column header.","name":"onColumnClick","type":" (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, will be executed when the user accesses the contextmenu on a column header.","name":"onColumnContextMenu","type":" (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set will show a grouped icon next to the column header name.","name":"isGrouped","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Arbitrary data passthrough which can be used by the caller.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Internal only value.","name":"calculatedWidth","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An optional class name to stick on the column cell within each header.","name":"headerClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set, will add additional LTR padding-right to column and cells.","name":"isPadded","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ColumnActionsMode":{"name":"ColumnActionsMode","propertyName":"ColumnActionsMode enum","propertyType":0,"property":[{"description":"Renders the column header as disabled.","name":"disabled"},{"description":"Renders the column header is clickable.","name":"clickable"},{"description":"Renders the column header ias clickable and displays the dropdown cheveron.","name":"hasDropdown"}],"extends":[""]},"ConstrainMode":{"name":"ConstrainMode","propertyName":"ConstrainMode enum","propertyType":0,"property":[{"description":"If specified, lets the content grow which allows the page to manage scrolling.","name":"unconstrained"},{"description":"If specified, constrains the list to the given layout space.","name":"horizontalConstrained"}],"extends":[""]},"DetailsListLayoutMode":{"name":"DetailsListLayoutMode","propertyName":"DetailsListLayoutMode enum","propertyType":0,"property":[{"description":"Lets the user resize columns and makes not attempt to fit them.","name":"fixedColumns"},{"description":"Manages which columns are visible, tries to size them according to their min/max rules and drops\r off columns that can't fit and have isCollapsable set.","name":"justified"}],"extends":[""]},"CheckboxVisibility":{"name":"CheckboxVisibility","propertyName":"CheckboxVisibility enum","propertyType":0,"property":[{"description":"Visible on hover.","name":"onHover"},{"description":"Visible always.","name":"always"},{"description":"Hide checkboxes.","name":"hidden"}],"extends":[""]},"IDialog":{"name":"IDialog","propertyName":"IDialog interface","propertyType":1,"property":[],"extends":[""]},"IDialogProps":{"name":"IDialogProps","propertyName":"IDialogProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IDialog interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IDialog) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Props to be passed through to Dialog Content","name":"dialogContentProps","type":" IDialogContentProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.","name":"onDismiss","type":" (ev?: React.MouseEvent<HTMLButtonElement>) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the dialog is hidden.","name":"hidden","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Props to be passed through to Modal","name":"modalProps","type":" IModalProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the dialog is displayed.","name":"isOpen","type":" boolean","defaultValue":" false\r","interfacePropertyType":2,"deprecatedMessage":" Use hidden instead\r"},{"description":"Whether the overlay is dark themed.","name":"isDarkOverlay","type":" boolean","defaultValue":" true\r","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps instead\r"},{"description":"A callback function which is called after the Dialog is dismissed and the animation is complete.","name":"onDismissed","type":" () => any","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps instead\r"},{"description":"Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).","name":"isBlocking","type":" boolean","defaultValue":" false\r","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps instead\r"},{"description":"Optional class name to be added to the root class","name":"className","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps.className instead\r"},{"description":"Optional override for container class","name":"containerClassName","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps.className instead\r"},{"description":"A callback function for when the Dialog content is mounted on the overlay layer","name":"onLayerDidMount","type":" () => void","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps instead\r"},{"description":"Deprecated at 0.81.2, use 'onLayerDidMount' instead.","name":"onLayerMounted","type":" () => void","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"The type of Dialog to display.","name":"type","type":" DialogType","defaultValue":" DialogType.normal\r","interfacePropertyType":2,"deprecatedMessage":" Pass through via dialogContentProps instead\r"},{"description":"The title text to display at the top of the dialog.","name":"title","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via dialogContentProps instead\r"},{"description":"The subtext to display in the dialog.","name":"subText","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via dialogContentProps instead\r"},{"description":"Optional override content class","name":"contentClassName","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via dialogContentProps instead as className\r"},{"description":"Other top buttons that will show up next to the close button","name":"topButtonsProps","type":" IButtonProps[]","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via dialogContentProps instead\r"},{"description":"Optional id for aria-LabelledBy","name":"ariaLabelledById","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps.titleAriaId instead\r"},{"description":"Optional id for aria-DescribedBy","name":"ariaDescribedById","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":" Pass through via modalProps.subtitleAriaId instead\r"}],"extends":["React.Props","IWithResponsiveModeState","IAccessiblePopupProps"]},"IDialogContent":{"name":"IDialogContent","propertyName":"IDialogContent interface","propertyType":1,"property":[],"extends":[""]},"IDialogContentProps":{"name":"IDialogContentProps","propertyName":"IDialogContentProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IDialogContent interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IDialogContent) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Show an 'x' close button in the upper-right corner","name":"showCloseButton","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Other top buttons that will show up next to the close button","name":"topButtonsProps","type":" IButtonProps[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional override class name","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function for when the Dialog is dismissed from the close button or light dismiss, before the animation completes.","name":"onDismiss","type":" (ev?: React.MouseEvent<HTMLButtonElement>) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The Id for subText container","name":"subTextId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The subtext to display in the dialog","name":"subText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The Id for title container","name":"titleId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The title text to display at the top of the dialog.","name":"title","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Responsive mode passed in from decorator.","name":"responsiveMode","type":" ResponsiveMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Label to be passed to to aria-label of close button","name":"closeButtonAriaLabel","type":" string","defaultValue":" Close\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The type of Dialog to display.","name":"type","type":" DialogType","defaultValue":" DialogType.normal\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"DialogType":{"name":"DialogType","propertyName":"DialogType enum","propertyType":0,"property":[{"description":"Standard dialog","name":"normal"},{"description":"Dialog with large header banner","name":"largeHeader"},{"description":"Dialog with an 'x' close button in the upper-right corner","name":"close"}],"extends":[""]},"IDocumentCard":{"name":"IDocumentCard","propertyName":"IDocumentCard interface","propertyType":1,"property":[],"extends":[""]},"IDocumentCardProps":{"name":"IDocumentCardProps","propertyName":"IDocumentCardProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IDocumentCard interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IDocumentCard) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The type of DocumentCard to display.","name":"type","type":" DocumentCardType","defaultValue":" DocumentCardType.normal\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function to call when the card is clicked or keyboard Enter/Space is pushed.","name":"onClick","type":" (ev?: React.SyntheticEvent<HTMLElement>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A URL to navigate to when the card is clicked. If a function has also been provided,\r it will be used instead of the URL.","name":"onClickHref","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class for document card.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Hex color value of the line below the card, which should correspond to the document type.\r This should only be supplied when using the 'compact' card layout.\r\r Deprecated at v4.17.1, to be removed at >= v5.0.0.","name":"accentColor","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":["React.Props"]},"DocumentCardType":{"name":"DocumentCardType","propertyName":"DocumentCardType enum","propertyType":0,"property":[{"description":"Standard DocumentCard.","name":"normal"},{"description":"Compact layout. Displays the preview beside the details, rather than above.","name":"compact"}],"extends":[""]},"IDocumentCardPreviewProps":{"name":"IDocumentCardPreviewProps","propertyName":"IDocumentCardPreviewProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"One or more preview images to display.","name":"previewImages","type":" IDocumentCardPreviewImage[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The function return string that will describe the number of overflow documents.\r such as  (overflowCount: number) => `+${ overflowCount } more`,","name":"getOverflowDocumentCountText","type":" (overflowCount: number) => string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IDocumentCardPreviewImage":{"name":"IDocumentCardPreviewImage","propertyName":"IDocumentCardPreviewImage interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"File name for the document this preview represents.","name":"name","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"URL to view the file.","name":"url","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Path to the preview image.","name":"previewImageSrc","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v1.3.6, to be removed at >= v2.0.0.","name":"errorImageSrc","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Path to the icon associated with this document type.","name":"iconSrc","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, forces the preview image to be this width.","name":"width","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, forces the preview image to be this height.","name":"height","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Used to determine how to size the image to fit the dimensions of the component.\r If both dimensions are provided, then the image is fit using ImageFit.scale, otherwise ImageFit.none is used.","name":"imageFit","type":" ImageFit","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Hex color value of the line below the preview, which should correspond to the document type.\r\r Deprecated at v4.17.1, to be removed at >= v5.0.0.","name":"accentColor","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"The props for the preview icon.\r If provided, icon will be rendered instead of image.","name":"previewIconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IDocumentCardTitleProps":{"name":"IDocumentCardTitleProps","propertyName":"IDocumentCardTitleProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Title text. If the card represents more than one document, this should be the title of one document and a \"+X\" string. For example, a collection of four documents would have a string of \"Document.docx +3\".","name":"title","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Whether we truncate the title to fit within the box. May have a performance impact.","name":"shouldTruncate","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IDocumentCardLocationProps":{"name":"IDocumentCardLocationProps","propertyName":"IDocumentCardLocationProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text for the location of the document.","name":"location","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"URL to navigate to for this location.","name":"locationHref","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function to call when the location is clicked.","name":"onClick","type":" (ev?: React.MouseEvent<HTMLElement>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label for the link to the document location.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IDocumentCardActivityProps":{"name":"IDocumentCardActivityProps","propertyName":"IDocumentCardActivityProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Describes the activity that has taken place, such as \"Created Feb 23, 2016\".","name":"activity","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"One or more people who are involved in this activity.","name":"people","type":" IDocumentCardActivityPerson[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["React.Props"]},"IDocumentCardActivityPerson":{"name":"IDocumentCardActivityPerson","propertyName":"IDocumentCardActivityPerson interface","propertyType":1,"property":[{"description":"The name of the person.","name":"name","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Path to the profile photo of the person.","name":"profileImageSrc","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The user's initials to display in the profile photo area when there is no image.","name":"initials","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The background color when the user's initials are displayed.","name":"initialsColor","type":" PersonaInitialsColor","defaultValue":" PersonaInitialsColor.blue\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IDocumentCardActionsProps":{"name":"IDocumentCardActionsProps","propertyName":"IDocumentCardActionsProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The actions available for this document.","name":"actions","type":" IButtonProps[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The number of views this document has received.","name":"views","type":" Number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IDropdown":{"name":"IDropdown","propertyName":"IDropdown interface","propertyType":1,"property":[{"description":"","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IDropdownProps":{"name":"IDropdownProps","propertyName":"IDropdownProps interface","propertyType":1,"property":[{"description":"Input placeholder text. Displayed until option is selected.","name":"placeHolder","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issues when the selected option changes","name":"onChanged","type":" (option: IDropdownOption, index?: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for placeholder text","name":"onRenderPlaceHolder","type":" IRenderFunction<IDropdownProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for selected option displayed in input","name":"onRenderTitle","type":" IRenderFunction<IDropdownOption | IDropdownOption[]>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom width for dropdown. If value is 0, width of the input field is used.","name":"dropdownWidth","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"responsiveMode","type":" ResponsiveMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional mode indicates if multi-choice selections is allowed.  Default to false","name":"multiSelect","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Keys that will be initially used to set selected items.","name":"defaultSelectedKeys","type":" string[] | number[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Keys of the selected items. If you provide this, you must maintain selection\r state by observing onChange events and passing a new value in when changed.","name":"selectedKeys","type":" string[] | number[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"When multiple items are selected, this still will be used to separate values in\r the dropdown title.","name":"multiSelectDelimiter","type":" string","defaultValue":"Value \", \"\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.52.0, use 'disabled' instead.","name":"isDisabled","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":["ISelectableDroppableTextProps"]},"IDropdownOption":{"name":"IDropdownOption","propertyName":"IDropdownOption interface","propertyType":1,"property":[{"description":"Data available to custom onRender functions.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v.65.1, use 'selected' instead.","name":"isSelected","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":["ISelectableOption"]},"IFacepile":{"name":"IFacepile","propertyName":"IFacepile interface","propertyType":1,"property":[],"extends":[""]},"IFacepileProps":{"name":"IFacepileProps","propertyName":"IFacepileProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IFacepile interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IFacepile) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Array of IPersonaProps that define each Persona. Note that the size\r is fixed at PersonaSize.extraSmall regardless of what is specified.","name":"personas","type":" IFacepilePersona[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Maximum number of personas to show","name":"maxDisplayablePersonas","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Size to display the personas","name":"personaSize","type":" PersonaSize","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ARIA label for persona list","name":"ariaDescription","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Show add person button","name":"showAddButton","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Button properties for the add face button","name":"addButtonProps","type":" IButtonProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.70, use 'overflowButtonProps' instead;","name":"chevronButtonProps","type":" IButtonProps","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Properties for the overflow icon","name":"overflowButtonProps","type":" IButtonProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Type of overflow icon to use","name":"overflowButtonType","type":" OverflowButtonType","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to access properties on the underlying Persona control","name":"getPersonaProps","type":" (persona: IFacepilePersona) => IPersonaProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class for Facepile root element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IFacepilePersona":{"name":"IFacepilePersona","propertyName":"IFacepilePersona interface","propertyType":1,"property":[{"description":"Name of the person.","name":"personaName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.","name":"imageUrl","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The user's initials to display in the image area when there is no image.","name":"imageInitials","type":" string","defaultValue":" [Derived from personaName]\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The background color when the user's initials are displayed.","name":"initialsColor","type":" PersonaInitialsColor","defaultValue":" [Derived from personaName]\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, persona will be rendered with cursor:pointer and the handler will be\r called on click.","name":"onClick","type":" (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, the handler will be called on mouse move.","name":"onMouseMove","type":" (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, the handler will be called when mouse moves out of the component.","name":"onMouseOut","type":" (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Extra data - not used directly but can be handy for passing additional data to custom event\r handlers.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.ButtonHTMLAttributes"]},"OverflowButtonType":{"name":"OverflowButtonType","propertyName":"OverflowButtonType enum","propertyType":0,"property":[{"description":"No overflow","name":"none"},{"description":"+1 overflow icon","name":"descriptive"},{"description":"More overflow icon","name":"more"},{"description":"Chevron overflow icon","name":"downArrow"}],"extends":[""]},"IFocusTrapZone":{"name":"IFocusTrapZone","propertyName":"IFocusTrapZone interface","propertyType":1,"property":[{"description":"Sets focus on the first focusable child in focus trap zone","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IFocusTrapZoneProps":{"name":"IFocusTrapZoneProps","propertyName":"IFocusTrapZoneProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IFocusTrapZone interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IFocusTrapZone) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets the HTMLElement to focus on when exiting the FocusTrapZone.","name":"elementToFocusOnDismiss","type":" HTMLElement","defaultValue":" The element.target that triggered the FTZ.\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets the aria-labelledby attribute.","name":"ariaLabelledBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates if this Trap Zone will allow clicks outside the FocusTrapZone","name":"isClickableOutsideFocusTrap","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates if this Trap Zone will ignore keeping track of HTMLElement that activated the Zone.","name":"ignoreExternalFocusing","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates whether focus trap zone should force focus inside the focus trap zone","name":"forceFocusInsideTrap","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates the selector for first focusable item","name":"firstFocusableSelector","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IFocusZone":{"name":"IFocusZone","propertyName":"IFocusZone interface","propertyType":1,"property":[{"description":"Sets focus to the first tabbable item in the zone.\r @returns True if focus could be set to an active element, false if no operation was taken.","name":"focus()","type":" boolean","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets focus to a specific child element within the zone. This can be used in conjunction with\r onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct\r location and then focus.)\r @param {HTMLElement} element The child element within the zone to focus.\r @returns True if focus could be set to an active element, false if no operation was taken.","name":"focusElement(childElement","type":" HTMLElement): boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IFocusZoneProps":{"name":"IFocusZoneProps","propertyName":"IFocusZoneProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IFocusZone interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IFocusZone) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional class name to provide on the root element, in addition to the ms-FocusZone class.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines which arrows to react to.","name":"direction","type":" FocusZoneDirection","defaultValue":" FocusZoneDirection.bidriectional\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optionally provide a selector for identifying the intial active element.","name":"defaultActiveElement","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set, the FocusZone will not be tabbable and keyboard navigation will be disabled.\r This does not affect disabled attribute of any child.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Element type the root element will use. Default is \"div\".","name":"elementType","type":" keyof React.ReactHTML","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set, will cycle to the beginning of the targets once the user navigates to the\r next target while at the end, and to the end when navigate to the previous at the beginning.","name":"isCircularNavigation","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, this callback will be executed on keypresses to determine if the user\r intends to navigate into the inner zone. Returning true will ask the first inner zone to\r set focus.","name":"isInnerZoneKeystroke","type":" (ev: React.KeyboardEvent<HTMLElement>) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets the aria-labelledby attribute.","name":"ariaLabelledBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets the aria-describedby attribute.","name":"ariaDescribedBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when one of immediate children elements gets active by getting focused\r or by having one of its respective children elements focused.","name":"onActiveElementChanged","type":" (element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v1.12.1. DIV props provided to the FocusZone will be mixed into the root element.","name":"rootProps","type":" React.HTMLAttributes<HTMLDivElement>","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Callback method for determining if focus should indeed be set on the given element.\r @param {HTMLElement} element The child element within the zone to focus.\r @returns True if focus should be set to the given element, false to avoid setting focus.","name":"onBeforeFocus","type":" (childElement?: HTMLElement) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Allow focus to move to root","name":"allowFocusRoot","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"FocusZoneDirection":{"name":"FocusZoneDirection","propertyName":"FocusZoneDirection enum","propertyType":0,"property":[{"description":"Only react to up/down arrows.","name":"vertical"},{"description":"Only react to left/right arrows.","name":"horizontal"},{"description":"React to all arrows.","name":"bidirectional"}],"extends":[""]},"CollapseAllVisibility":{"name":"CollapseAllVisibility","propertyName":"CollapseAllVisibility enum","propertyType":0,"property":[{"description":"","name":"hidden"},{"description":"","name":"visible"}],"extends":[""]},"IGroupedList":{"name":"IGroupedList","propertyName":"IGroupedList interface","propertyType":1,"property":[{"description":"Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\r still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\r call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.","name":"forceUpdate","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Toggles the collapsed state of all the groups in the list.","name":"toggleCollapseAll","type":" (allCollapsed: boolean) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["IList"]},"IGroupedListProps":{"name":"IGroupedListProps","propertyName":"IGroupedListProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component?: IGroupedList) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name to add to the root element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Map of callback functions related to drag and drop functionality.","name":"dragDropEvents","type":" IDragDropEvents","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"helper to manage drag/drop across item and groups","name":"dragDropHelper","type":" IDragDropHelper","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Event names and corresponding callbacks that will be registered to groups and rendered elements","name":"eventsToRegister","type":" { eventName: string, callback: (context: IDragDropContext, event?: any) => void }[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional override properties to render groups.","name":"groupProps","type":" IGroupRenderProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional grouping instructions.","name":"groups","type":" IGroup[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"List of items to render.","name":"items","type":" any[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional properties to pass through to the list components being rendered.","name":"listProps","type":" IListProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Rendering callback to render the group items.","name":"onRenderCell","type":" (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    index?: number\r\n  ) => React.ReactNode","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional selection model to track selection state.","name":"selection","type":" ISelection","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Controls how/if the list manages selection.","name":"selectionMode","type":" SelectionMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional Viewport, provided by the parent component.","name":"viewport","type":" IViewport","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback when the group expand state changes between all collapsed and at least one group is expanded.","name":"onGroupExpandStateChanged","type":" (isSomeGroupExpanded: boolean) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"boolean to control if pages containing unchanged items should be cached, this is a perf optimization\r The same property in List.Props","name":"usePageCache","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback to determine whether the list should be rendered in full, or virtualized.\r Virtualization will add and remove pages of items as the user scrolls them into the visible range.\r This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\r The default implementation will virtualize when this callback is not provided.","name":"onShouldVirtualize","type":" (props: IListProps) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IGroup":{"name":"IGroup","propertyName":"IGroup interface","propertyType":1,"property":[{"description":"Unique identifier for the group.","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Display name for the group, rendered on the header.","name":"name","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Start index for the group within the given items.","name":"startIndex","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"How many items should be rendered within the group.","name":"count","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Nested groups, if any.","name":"children","type":" IGroup[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Number indicating the level of nested groups.","name":"level","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at 1.0.0, selection state will be controled by the selection store only.","name":"isSelected","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"If all the items in the group are collapsed.","name":"isCollapsed","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If the items within the group are summarized or showing all.","name":"isShowingAll","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If drag/drop is enabled for the group header.","name":"isDropEnabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Arbitrary data required to be preserved by the caller.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional accessibility label (aria-label) attribute that will be stamped on to the element.\r If none is specified, the arai-label attribute will contain the group name","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag to indicate the group has more data to load than the current group count indicated.\r This can be used to indicate that a plus should be rendered next to the group count in the header.","name":"hasMoreData","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IGroupRenderProps":{"name":"IGroupRenderProps","propertyName":"IGroupRenderProps interface","propertyType":1,"property":[{"description":"Boolean indicating if all groups are in collapsed state.","name":"isAllGroupsCollapsed","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Grouping item limit.","name":"getGroupItemLimit","type":" (group: IGroup) => number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when all groups are expanded or collapsed.","name":"onToggleCollapseAll","type":" (isAllCollapsed: boolean) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Information to pass in to the group header.","name":"headerProps","type":" IGroupDividerProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Information to pass in to the group Show all footer.","name":"showAllProps","type":" IGroupDividerProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Information to pass in to the group footer.","name":"footerProps","type":" IGroupDividerProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Override which allows the caller to provide a custom header.","name":"onRenderHeader","type":" IRenderFunction<IGroupDividerProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Override which allows the caller to provide a custom Show All link.","name":"onRenderShowAll","type":" IRenderFunction<IGroupDividerProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Override which allows the caller to provide a custom footer.","name":"onRenderFooter","type":" IRenderFunction<IGroupDividerProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Flag to indicate whether to ignore the collapsing icon on header.","name":"collapseAllVisibility","type":" CollapseAllVisibility","defaultValue":" CheckboxVisibility.visible\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Boolean indicating if empty groups are shown","name":"showEmptyGroups","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IGroupDividerProps":{"name":"IGroupDividerProps","propertyName":"IGroupDividerProps interface","propertyType":1,"property":[{"description":"","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback to determine if a group has missing items and needs to load them from the server.","name":"isGroupLoading","type":" (group: IGroup) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text shown on group headers to indicate the group is being loaded.","name":"loadingText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The group to be rendered by the header.","name":"group","type":" IGroup","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The index of the group.","name":"groupIndex","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The indent level of the group.","name":"groupLevel","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If all items in the group are selected.","name":"selected","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v.65.1 and will be removed by v 1.0. Use 'selected' instead.","name":"isSelected","type":" boolean","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"A reference to the viewport in which the header is rendered.","name":"viewport","type":" IViewport","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The selection mode of the list the group lives within.","name":"selectionMode","type":" SelectionMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to display for the group footer.","name":"footerText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to display for the group \"Show All\" link.","name":"showAllLinkText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the group \"Show All\" link is clicked","name":"onToggleSummarize","type":" (group: IGroup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the group header is clicked.","name":"onGroupHeaderClick","type":" (group: IGroup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the group is expanded or collapsed.","name":"onToggleCollapse","type":" (group: IGroup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the group is selected.","name":"onToggleSelectGroup","type":" (group: IGroup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the group selection check box is shown for collapsed groups.","name":"isCollapsedGroupSelectVisible","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IExpandingCard":{"name":"IExpandingCard","propertyName":"IExpandingCard interface","propertyType":1,"property":[],"extends":[""]},"IExpandingCardProps":{"name":"IExpandingCardProps","propertyName":"IExpandingCardProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IExpandingCard interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IExpandingCard) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Item to be returned with onRender functions","name":"renderData","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Render function to populate compact content area","name":"onRenderCompactCard","type":" IRenderFunction<IExpandingCardProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Render function to populate expanded content area","name":"onRenderExpandedCard","type":" IRenderFunction<IExpandingCardProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Element to anchor the ExpandingCard to.","name":"targetElement","type":" HTMLElement","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback upon focus or mouse enter event","name":"onEnter","type":" (ev?: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback upon blur or mouse leave event","name":"onLeave","type":" (ev?: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Height of compact card","name":"compactCardHeight","type":" number","defaultValue":" 156\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Height of expanded card","name":"expandedCardHeight","type":" number","defaultValue":" 384\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Use to open the card in expanded format and not wait for the delay","name":"mode","type":" ExpandingCardMode","defaultValue":" ExpandingCardMode.compact\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the element should be positioned","name":"directionalHint","type":" DirectionalHint","defaultValue":" DirectionalHint.bottomLeftEdge\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The gap between the card and the target","name":"gapSpace","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for this component","name":"styles","type":" IExpandingCardStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"ExpandingCardMode":{"name":"ExpandingCardMode","propertyName":"ExpandingCardMode enum","propertyType":0,"property":[{"description":"To have top compact card only","name":"compact"},{"description":"To have both top compact and bottom expanded card","name":"expanded"}],"extends":[""]},"IExpandingCardStyles":{"name":"IExpandingCardStyles","propertyName":"IExpandingCardStyles interface","propertyType":1,"property":[{"description":"Style for the root element in the default enabled, non-toggled state.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the main card element.","name":"compactCard","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Base Style for the expanded card content","name":"expandedCard","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the expanded card scroll content","name":"expandedCardScroll","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IHoverCard":{"name":"IHoverCard","propertyName":"IHoverCard interface","propertyType":1,"property":[],"extends":[""]},"IHoverCardProps":{"name":"IHoverCardProps","propertyName":"IHoverCardProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IHoverCard) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional properties to pass through for HoverCard, reference detail properties in IHoverCardProps","name":"expandingCardProps","type":" IExpandingCardProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to mark the container as described by the hover card.\r If not specified, the caller should mark as element as described by the hover card id.","name":"setAriaDescribedBy","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Length of compact card delay","name":"cardOpenDelay","type":" number","defaultValue":" 500\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Length of card dismiss delay. A min number is necessary for pointer to hop between target and card","name":"cardDismissDelay","type":" number","defaultValue":" 100\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Time in ms when expanded card should open after compact card","name":"expandedCardOpenDelay","type":" number","defaultValue":" 1500\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true disables Card dismiss upon mouse leave, so that card sticks around.","name":"sticky","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Enables instant open of the full card upon click","name":"instantOpenOnClick","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for this component","name":"styles","type":" IHoverCardStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional target element to tag hover card on","name":"target","type":" HTMLElement | string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when card becomes visible","name":"onCardVisible","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when card hides","name":"onCardHide","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IHoverCardStyles":{"name":"IHoverCardStyles","propertyName":"IHoverCardStyles interface","propertyType":1,"property":[{"description":"Style for the host element in the default enabled, non-toggled state.","name":"host","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IconType":{"name":"IconType","propertyName":"IconType enum","propertyType":0,"property":[{"description":"Render using the fabric icon font.","name":"default"},{"description":"Render using an image, where imageProps would be used.","name":"image"},{"description":"Deprecated, use default.\r @deprecated","name":"Default"},{"description":"Deprecated, use image.\r @deprecated","name":"Image"}],"extends":[""]},"IIconStyles":{"name":"IIconStyles","propertyName":"IIconStyles interface","propertyType":1,"property":[{"description":"","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"imageContainer","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IIconProps":{"name":"IIconProps","propertyName":"IIconProps interface","propertyType":1,"property":[{"description":"The name of the icon to use from the icon font.","name":"iconName","type":" string | null","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional styling for the elements within the Icon.","name":"styles","type":" IIconStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria label of the button for the benefit of screen readers.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The type of icon to render (image or icon font).\r\r @type {IconType}\r @memberOf IIconProps","name":"iconType","type":" IconType","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If rendering an image icon, these props will be passed to the Image component.\r\r @type {IImageProps}\r @memberOf IIconProps","name":"imageProps","type":" IImageProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IImage":{"name":"IImage","propertyName":"IImage interface","propertyType":1,"property":[],"extends":[""]},"IImageProps":{"name":"IImageProps","propertyName":"IImageProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ICheckbox interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IImage) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, fades the image in when loaded.","name":"shouldFadeIn","type":" boolean","defaultValue":" false;\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\r it is successfully loaded. This disables shouldFadeIn.","name":"shouldStartVisible","type":" boolean","defaultValue":" false;\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, adds the indicated css class to the image.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Used to determine how the image is scaled and cropped to fit the frame.\r\r  image won't be scaled or cropped.","name":"imageFit","type":" ImageFit","defaultValue":" If both dimensions are provided, then the image is fit using ImageFit.scale. Otherwise, the\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v1.3.6, to replace the src in case of errors, use onLoadingStateChange instead and\r rerender the Image with a difference src.","name":"errorSrc","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"If true, the image frame will expand to fill its parent container.","name":"maximizeFrame","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback method for when the image load state has changed.\r The 'loadState' parameter indicates the current state of the Image.","name":"onLoadingStateChange","type":" (loadState: ImageLoadState) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Specified the cover style to be used for this image. If not\r specified, this will be dynamically calculated based on the\r aspect ratio for the image.","name":"coverStyle","type":" ImageCoverStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.ImgHTMLAttributes"]},"ImageFit":{"name":"ImageFit","propertyName":"ImageFit enum","propertyType":0,"property":[{"description":"The image is not scaled. The image is centered and cropped within the content box.","name":"center"},{"description":"The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will\r be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of\r the frame will be empty depending on the difference in aspect ratio between the image and the frame.","name":"contain"},{"description":"The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped from\r the top and bottom, or from the sides, depending on the difference in aspect ratio between the image and the frame.","name":"cover"},{"description":"Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the\r frame will have empty space.","name":"none"}],"extends":[""]},"ImageCoverStyle":{"name":"ImageCoverStyle","propertyName":"ImageCoverStyle enum","propertyType":0,"property":[{"description":"The image will be shown at 100% height of container and the width will be scaled accordingly","name":"landscape"},{"description":"The image will be shown at 100% width of container and the height will be scaled accordingly","name":"portrait"}],"extends":[""]},"ImageLoadState":{"name":"ImageLoadState","propertyName":"ImageLoadState enum","propertyType":0,"property":[{"description":"The image has not yet been loaded, and there is no error yet.","name":"notLoaded"},{"description":"The image has been loaded successfully.","name":"loaded"},{"description":"An error has been encountered while loading the image.","name":"error"},{"description":"Deprecated at v1.3.6, to replace the src in case of errors, use onLoadingStateChange instead\r and rerender the Image with a difference src.\r @deprecated","name":"errorLoaded"}],"extends":[""]},"ILabel":{"name":"ILabel","propertyName":"ILabel interface","propertyType":1,"property":[],"extends":[""]},"ILabelProps":{"name":"ILabelProps","propertyName":"ILabelProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ILabel interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ILabel) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the associated form field is required or not","name":"required","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Renders the label as disabled.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.LabelHTMLAttributes"]},"ILayer":{"name":"ILayer","propertyName":"ILayer interface","propertyType":1,"property":[],"extends":[""]},"ILayerProps":{"name":"ILayerProps","propertyName":"ILayerProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ILayer interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ILayer) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the layer is mounted.","name":"onLayerMounted","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the layer is mounted.","name":"onLayerDidMount","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for when the layer is unmounted.","name":"onLayerWillUnmount","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The optional id property provided on a LayerHost that this Layer should render within. The LayerHost does\r not need to be immediately available but once has been rendered, and if missing, we'll avoid trying\r to render the Layer content until the host is available. If an id is not provided, we will render the Layer\r content in a fixed position element rendered at the end of the document.","name":"hostId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"ILayerHost":{"name":"ILayerHost","propertyName":"ILayerHost interface","propertyType":1,"property":[],"extends":[""]},"ILayerHostProps":{"name":"ILayerHostProps","propertyName":"ILayerHostProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ILayerHost interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ILayerHost) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines the id for the layer host that Layers can target (using the hostId property.)","name":"id","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"ILink":{"name":"ILink","propertyName":"ILink interface","propertyType":1,"property":[{"description":"Sets focus to the link.","name":"focus()","type":" void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ILinkProps":{"name":"ILinkProps","propertyName":"ILinkProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ILink interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ILink) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the link is disabled","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.AllHTMLAttributes"]},"IList":{"name":"IList","propertyName":"IList interface","propertyType":1,"property":[{"description":"Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\r to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\r\r Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\r when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\r\r @param index Index of item to scroll to\r @param measureItem Optional callback to measure the height of an individual item","name":"scrollToIndex(index","type":" number, measureItem?: (itemIndex: number) => number): void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IListProps":{"name":"IListProps","propertyName":"IListProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IList interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IList) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional classname to append to root list.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Items to render.","name":"items","type":" any[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to call when trying to render an item.","name":"onRenderCell","type":" (item?: any, index?: number) => React.ReactNode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback for monitoring when a page is added.","name":"onPageAdded","type":" (page: IPage) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback for monitoring when a page is removed.","name":"onPageRemoved","type":" (page: IPage) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback to get the item key, to be used on render.","name":"getKey","type":" (item: any, index?: number) => string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Called by the list to get the specification for a page.\r Use this method to provide an allocation of items per page,\r as well as an estimated rendered height for the page.\r The list will use this to optimize virtualization.","name":"getPageSpecification","type":" (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method called by the list to get how many items to render per page from specified index.\r In general, use `getPageSpecification` instead.","name":"getItemCountForPage","type":" (itemIndex?: number, visibleRect?: IRectangle) => number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method called by the list to get the pixel height for a given page. By default, we measure the first\r page's height and default all other pages to that height when calculating the surface space. It is\r ideal to be able to adequately predict page heights in order to keep the surface space from jumping\r in pixels, which has been seen to cause browser performance issues.\r In general, use `getPageSpecification` instead.","name":"getPageHeight","type":" (itemIndex?: number, visibleRect?: IRectangle) => number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method called by the list to derive the page style object. For spacer pages, the list will derive\r the height and passed in heights will be ignored.","name":"getPageStyle","type":" (page: IPage) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"In addition to the visible window, how many windowHeights should we render ahead.","name":"renderedWindowsAhead","type":" number","defaultValue":" 2\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"In addition to the visible window, how many windowHeights should we render behind.","name":"renderedWindowsBehind","type":" number","defaultValue":" 2\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Index in items array to start rendering from. Defaults to 0.","name":"startIndex","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Number of items to render. Defaults to items.length.","name":"renderCount","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Boolean value to enable render page caching. This is an experimental performance optimization\r that is off by default.","name":"usePageCache","type":" boolean","defaultValue":"Value false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback to determine whether the list should be rendered in full, or virtualized.\r Virtualization will add and remove pages of items as the user scrolls them into the visible range.\r This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\r The default implementation will virtualize when this callback is not provided.","name":"onShouldVirtualize","type":" (props: IListProps) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The role to assign to the list root element.\r Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.","name":"role","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Called when the List will render a page.\r Override this to control how cells are rendered within a page.","name":"onRenderPage","type":" (pageProps: IPageProps, defaultRender?: IRenderFunction<IPageProps>) => React.ReactNode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IPage":{"name":"IPage","propertyName":"IPage interface","propertyType":1,"property":[{"description":"","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"items","type":" any[] | undefined","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"startIndex","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"itemCount","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"style","type":" any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"top","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"height","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IPageProps":{"name":"IPageProps","propertyName":"IPageProps interface","propertyType":1,"property":[{"description":"The role being assigned to the rendered page element by the list.","name":"role","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The allocation data for the page.","name":"page","type":" IPage","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["React.HTMLAttributes","React.Props"]},"IPageSpecification":{"name":"IPageSpecification","propertyName":"IPageSpecification interface","propertyType":1,"property":[{"description":"The number of items to allocate to the page.","name":"itemCount","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The estimated pixel height of the page.","name":"height","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Data to pass through to the page when rendering.","name":"data","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IMarqueeSelection":{"name":"IMarqueeSelection","propertyName":"IMarqueeSelection interface","propertyType":1,"property":[],"extends":[""]},"IMarqueeSelectionProps":{"name":"IMarqueeSelectionProps","propertyName":"IMarqueeSelectionProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IMarqueeSelection interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IMarqueeSelection) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The selection object to interact with when updating selection changes.","name":"selection","type":" ISelection","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional props to mix into the root DIV element.","name":"rootProps","type":" React.HTMLAttributes<HTMLDivElement>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional callback that is called, when the mouse down event occurs, in order to determine\r if we should start a marquee selection. If true is returned, we will cancel the mousedown\r event to prevent upstream mousedown handlers from executing.","name":"onShouldStartSelection","type":" (ev: MouseEvent) => boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag to control the enabled state of marquee selection. This allows you to render\r it and have events all ready to go, but conditionally disable it. That way transitioning\r between enabled/disabled generate no difference in the DOM.","name":"isEnabled","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag to restrict the drag rect to the root element, instead of allowing the drag\r rect to start outside of the root element boundaries.","name":"isDraggingConstrainedToRoot","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IMessageBar":{"name":"IMessageBar","propertyName":"IMessageBar interface","propertyType":1,"property":[],"extends":[""]},"IMessageBarProps":{"name":"IMessageBarProps","propertyName":"IMessageBarProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IMessageBar interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IMessageBar) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The type of MessageBar to render.","name":"messageBarType","type":" MessageBarType","defaultValue":" MessageBarType.info\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The actions you want to show on the other side.","name":"actions","type":" JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A description of the message bar for the benefit of screen readers.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the message bar has a dismiss button and its callback.\r If null, we don't show a dismiss button.","name":"onDismiss","type":" (ev?: React.MouseEvent<HTMLButtonElement | BaseButton | HTMLAnchorElement | Button>) => any","defaultValue":" null\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if the message bar is multi lined.\r If false, and the text overflows over buttons or to another line, it is clipped.","name":"isMultiline","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label on dismiss button if onDismiss is defined.","name":"dismissButtonAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"MessageBarType":{"name":"MessageBarType","propertyName":"MessageBarType enum","propertyType":0,"property":[{"description":"Info styled MessageBar","name":"info"},{"description":"Error styled MessageBar","name":"error"},{"description":"Blocked styled MessageBar","name":"blocked"},{"description":"SevereWarning styled MessageBar","name":"severeWarning"},{"description":"Success styled MessageBar","name":"success"},{"description":"Warning styled MessageBar","name":"warning"},{"description":"Deprecated at v0.48.0, to be removed at >= v1.0.0. Use 'blocked' instead.\r @deprecated","name":"remove"}],"extends":[""]},"IModal":{"name":"IModal","propertyName":"IModal interface","propertyType":1,"property":[],"extends":[""]},"IModalProps":{"name":"IModalProps","propertyName":"IModalProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IDialog interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IModal) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the dialog is displayed.","name":"isOpen","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the overlay is dark themed.","name":"isDarkOverlay","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function for when the Modal is dismissed light dismiss, before the animation completes.","name":"onDismiss","type":" (ev?: React.MouseEvent<HTMLButtonElement>) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function which is called after the Modal is dismissed and the animation is complete.","name":"onDismissed","type":" () => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).","name":"isBlocking","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name to be added to the root class","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional override for container class","name":"containerClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function for when the Modal content is mounted on the overlay layer","name":"onLayerDidMount","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ARIA id for the title of the Modal, if any","name":"titleAriaId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ARIA id for the subtitle of the Modal, if any","name":"subtitleAriaId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props","IWithResponsiveModeState","IAccessiblePopupProps"]},"INav":{"name":"INav","propertyName":"INav interface","propertyType":1,"property":[{"description":"The meta 'key' property of the currently selected NavItem of the Nav. Can return\r undefined if the currently selected nav item has no populated key property. Be aware\r that in order for Nav to properly understand which key is selected all NavItems in\r all groups of the Nav must have populated key properties.","name":"selectedKey","type":" string | undefined","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"INavLinkGroup":{"name":"INavLinkGroup","propertyName":"INavLinkGroup interface","propertyType":1,"property":[{"description":"Text to render as the header of a group","name":"name","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Links to render within this group","name":"links","type":" INavLink[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The name to use for functional automation tests","name":"automationId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, the group should render collapsed by default","name":"collapseByDefault","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback invoked when a group header is clicked","name":"onHeaderClick","type":" (ev?: React.MouseEvent<HTMLElement>, isCollapsing?: boolean) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"INavLink":{"name":"INavLink","propertyName":"INavLink interface","propertyType":1,"property":[{"description":"Text to render for this link","name":"name","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"URL to navigate to for this link","name":"url","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Meta info for the link server, if negative, client side added node.","name":"key","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Child links to this link, if any","name":"links","type":" INavLink[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback invoked when this link is clicked. Providing this callback will cause the link\r to render as a button (rather than an anchor) unless forceAnchor is set to true.","name":"onClick","type":" (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"button icon name if applied","name":"icon","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Classname to apply to the icon link.","name":"iconClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.68.1 and will be removed at >= v1.0.0.","name":"engagementName","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"Deprecated at v0.68.1 and will be removed at >= v1.0.0.","name":"altText","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"The name to use for functional automation tests","name":"automationId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the link is in an expanded state","name":"isExpanded","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label for nav link","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"title for tooltip or description","name":"title","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Link <a> target.","name":"target","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Point to the parent node key.  This is used in EditNav when move node from sublink to\r   parent link vs vers.","name":"parentId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"(Optional) By default, any link with onClick defined will render as a button.\r Set this property to true to override that behavior. (Links without onClick defined\r will render as anchors by default.)","name":"forceAnchor","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"(Optional) Any additional properties to apply to the rendered links.","name":"[propertyName","type":" string]: any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IOverflowSet":{"name":"IOverflowSet","propertyName":"IOverflowSet interface","propertyType":1,"property":[{"description":"Sets focus to the button.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IOverflowSetProps":{"name":"IOverflowSetProps","propertyName":"IOverflowSetProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" (ref?: IOverflowSet) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Class name","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An array of items to be rendered by your onRenderItem function in the primary content area","name":"items","type":" IOverflowSetItemProps[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An array of items to be passed to overflow contextual menu","name":"overflowItems","type":" IOverflowSetItemProps[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Method to call when trying to render an item.","name":"onRenderItem","type":" (item: IOverflowSetItemProps) => any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Rendering method for overflow button and contextual menu. The argument to the function is\r the overflowItems passed in as props to this function.","name":"onRenderOverflowButton","type":" IRenderFunction<any[]>","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["React.Props"]},"IOverflowSetItemProps":{"name":"IOverflowSetItemProps","propertyName":"IOverflowSetItemProps interface","propertyType":1,"property":[{"description":"Unique id to identify the item","name":"key","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Any additional properties to use when custom rendering menu items.","name":"[propertyName","type":" string]: any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IOverlay":{"name":"IOverlay","propertyName":"IOverlay interface","propertyType":1,"property":[],"extends":[""]},"IOverlayProps":{"name":"IOverlayProps","propertyName":"IOverlayProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IOverlay interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IOverlay) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether to use the dark-themed overlay.","name":"isDarkThemed","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IPanel":{"name":"IPanel","propertyName":"IPanel interface","propertyType":1,"property":[{"description":"Forces the panel to open.","name":"open","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Forces the panel to dismiss.","name":"dismiss","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IPanelProps":{"name":"IPanelProps","propertyName":"IPanelProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IPanel interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IPanel) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the panel is displayed.","name":"isOpen","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Has the close button visible.","name":"hasCloseButton","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the panel can be light dismissed.","name":"isLightDismiss","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether the panel uses a modal overlay or not","name":"isBlocking","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Determines if content should stretch to fill available space putting footer at the bottom of the page","name":"isFooterAtBottom","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Header text for the Panel.","name":"headerText","type":" string","defaultValue":" \"\"\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function for when the panel is closed, before the animation completes.","name":"onDismiss","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function which is called after the Panel is dismissed and the animation is complete.","name":"onDismissed","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional styling options.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Type of the panel.","name":"type","type":" PanelType","defaultValue":" PanelType.smallFixedRight\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom panel width, used only when type is set to PanelType.custom.","name":"customWidth","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label on close button","name":"closeButtonAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional parameter to provider the class name for header text","name":"headerClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets the HTMLElement to focus on when exiting the FocusTrapZone.","name":"elementToFocusOnDismiss","type":" HTMLElement","defaultValue":" The element.target that triggered the Panel.\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates if this Panel will ignore keeping track of HTMLElement that activated the Zone.","name":"ignoreExternalFocusing","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates whether Panel should force focus inside the focus trap zone","name":"forceFocusInsideTrap","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates the selector for first focusable item","name":"firstFocusableSelector","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional props to pass to the Layer component hosting the panel.","name":"layerProps","type":" ILayerProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer navigation region. Replaces current close button.","name":"onRenderNavigation","type":" IRenderFunction<IPanelProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for header region. Replaces current title","name":"onRenderHeader","type":" IRenderFunction<IPanelProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for body region. Replaces any children passed into the component.","name":"onRenderBody","type":" IRenderFunction<IPanelProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for footer region. Replaces sticky footer.","name":"onRenderFooter","type":" IRenderFunction<IPanelProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom renderer for content in the sticky footer","name":"onRenderFooterContent","type":" IRenderFunction<IPanelProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Internal ID passed to render functions.","name":"componentId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"PanelType":{"name":"PanelType","propertyName":"PanelType enum","propertyType":0,"property":[{"description":"Renders the panel in 'small' mode, anchored to the far side (right in LTR mode), and has a fluid width.\r Only used on Small screen breakpoints.\r Small: 320-479px width (full screen), 16px Left/Right padding\r Medium: <unused>\r Large: <unused>\r XLarge: <unused>\r XXLarge: <unused>","name":"smallFluid"},{"description":"Renders the panel in 'small' mode, anchored to the far side (right in LTR mode), and has a fixed width.\r Small: 272px width, 16px Left/Right padding\r Medium: 340px width, 16px Left/Right padding\r Large: 340px width, 32px Left/Right padding\r XLarge: 340px width, 32px Left/Right padding\r XXLarge: 340px width, 40px Left/Right padding","name":"smallFixedFar"},{"description":"Renders the panel in 'small' mode, anchored to the near side (left in LTR mode), and has a fixed width.\r Small: 272px width, 16px Left/Right padding\r Medium: 272px width, 16px Left/Right padding\r Large: 272px width, 32px Left/Right padding\r XLarge: 272px width, 32px Left/Right padding\r XXLarge: 272px width, 32px Left/Right padding","name":"smallFixedNear"},{"description":"Renders the panel in 'medium' mode, anchored to the far side (right in LTR mode).\r Small: <adapts to smallFluid>\r Medium: <adapts to smallFixedFar>\r Large: 48px fixed left margin, 32px Left/Right padding\r XLarge: 644px width, 32px Left/Right padding\r XXLarge: 643px width, 40px Left/Right padding","name":"medium"},{"description":"Renders the panel in 'large' mode, anchored to the far side (right in LTR mode), and is fluid at XXX-Large breakpoint.\r Small: <adapts to smallFluid>\r Medium:  <adapts to smallFixedFar>\r Large: <adapts to medium>\r XLarge: 48px fixed left margin, 32px Left/Right padding\r XXLarge: 48px fixed left margin, 32px Left/Right padding\r XXXLarge: 48px fixed left margin, (no redlines for padding, assuming previous breakpoint)","name":"large"},{"description":"Renders the panel in 'large' mode, anchored to the far side (right in LTR mode), and is fixed at XXX-Large breakpoint.\r Small: <adapts to smallFluid>\r Medium:  <adapts to smallFixedFar>\r Large: <adapts to medium>\r XLarge: 48px fixed left margin, 32px Left/Right padding\r XXLarge: 48px fixed left margin, 32px Left/Right padding\r XXXLarge: 940px width, (no redlines for padding, assuming previous breakpoint)","name":"largeFixed"},{"description":"Renders the panel in 'extra large' mode, anchored to the far side (right in LTR mode).\r Small: <adapts to smallFluid>\r Medium: <adapts to smallFixedFar>\r Large: <adapts to medium>\r XLarge: <adapts to large>\r XXLarge: 176px fixed left margin, 40px Left/Right padding\r XXXLarge: 176px fixed left margin, 40px Left/Right padding","name":"extraLarge"},{"description":"Renders the panel in 'custom' mode using customWidth, anchored to the far side (right in LTR mode).\r Small: <adapts to smallFluid>\r Medium: <adapts to smallFixedFar>\r Large: 48px fixed left margin, 32px Left/Right padding\r XLarge: 644px width, 32px Left/Right padding\r XXLarge: 643px width, 40px Left/Right padding","name":"custom"}],"extends":[""]},"IPersona":{"name":"IPersona","propertyName":"IPersona interface","propertyType":1,"property":[],"extends":[""]},"IPersonaProps":{"name":"IPersonaProps","propertyName":"IPersonaProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IPersona interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IPersona) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Primary text to display, usually the name of the person.","name":"primaryText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the primary text.","name":"onRenderPrimaryText","type":" IRenderFunction<IPersonaProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Decides the size of the control.","name":"size","type":" PersonaSize","defaultValue":" PersonaSize.regular\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, adds the css class 'is-fadeIn' to the image.","name":"imageShouldFadeIn","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until\r it is successfully loaded. This disables imageShouldFadeIn.","name":"imageShouldStartVisible","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Url to the image to use, should be a square aspect ratio and big enough to fit in the image area.","name":"imageUrl","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Alt text for the image to use. Defaults to an empty string.","name":"imageAlt","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The user's initials to display in the image area when there is no image.","name":"imageInitials","type":" string","defaultValue":" [Derived from primaryText]\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the initials","name":"onRenderInitials","type":" IRenderFunction<IPersonaProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The background color when the user's initials are displayed.","name":"initialsColor","type":" PersonaInitialsColor","defaultValue":" [Derived from primaryText]\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Presence of the person to display - will not display presence if undefined.","name":"presence","type":" PersonaPresence","defaultValue":" PersonaPresence.none\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Secondary text to display, usually the role of the user.","name":"secondaryText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the secondary text.","name":"onRenderSecondaryText","type":" IRenderFunction<IPersonaProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Tertiary text to display, usually the status of the user.","name":"tertiaryText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the tertiary text.","name":"onRenderTertiaryText","type":" IRenderFunction<IPersonaProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional text to display, usually a custom message set.","name":"optionalText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the optional text.","name":"onRenderOptionalText","type":" IRenderFunction<IPersonaProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether to not render persona details, and just render the persona image/initials.","name":"hidePersonaDetails","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional CSS class(es) to apply to the Persona","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, show the secondary text line regardless of the size of the persona","name":"showSecondaryText","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"PersonaSize":{"name":"PersonaSize","propertyName":"PersonaSize enum","propertyType":0,"property":[{"description":"","name":"tiny"},{"description":"","name":"extraExtraSmall"},{"description":"","name":"extraSmall"},{"description":"","name":"small"},{"description":"","name":"regular"},{"description":"","name":"large"},{"description":"","name":"extraLarge"},{"description":"","name":"size28"},{"description":"","name":"size16"}],"extends":[""]},"PersonaPresence":{"name":"PersonaPresence","propertyName":"PersonaPresence enum","propertyType":0,"property":[{"description":"","name":"none"},{"description":"","name":"offline"},{"description":"","name":"online"},{"description":"","name":"away"},{"description":"","name":"dnd"},{"description":"","name":"blocked"},{"description":"","name":"busy"}],"extends":[""]},"PersonaInitialsColor":{"name":"PersonaInitialsColor","propertyName":"PersonaInitialsColor enum","propertyType":0,"property":[{"description":"","name":"lightBlue"},{"description":"","name":"blue"},{"description":"","name":"darkBlue"},{"description":"","name":"teal"},{"description":"","name":"lightGreen"},{"description":"","name":"green"},{"description":"","name":"darkGreen"},{"description":"","name":"lightPink"},{"description":"","name":"pink"},{"description":"","name":"magenta"},{"description":"","name":"purple"},{"description":"","name":"black"},{"description":"","name":"orange"},{"description":"","name":"red"},{"description":"","name":"darkRed"}],"extends":[""]},"IBaseAutoFill":{"name":"IBaseAutoFill","propertyName":"IBaseAutoFill interface","propertyType":1,"property":[{"description":"The current index of the cursor in the input area. Returns -1 if the input element\r is not ready.","name":"cursorLocation","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"A boolean for whether or not there is a value selected in the input area.","name":"isValueSelected","type":" boolean","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The current text value that the user has entered.","name":"value","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The current index of where the selection starts. Returns -1 if the input element\r is not ready.","name":"selectionStart","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"the current index of where the selection ends. Returns -1 if the input element\r is not ready.","name":"selectionEnd","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The current input element.","name":"inputElement","type":" HTMLInputElement","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Focus the input element.","name":"focus()","type":" void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Clear all text in the input. Sets value to '';","name":"clear()","type":" void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IBasePicker":{"name":"IBasePicker","propertyName":"IBasePicker<T> interface","propertyType":1,"property":[{"description":"Gets the current value of the input.","name":"items","type":" T[] | undefined","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets focus to the input.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IBasePickerProps":{"name":"IBasePickerProps","propertyName":"IBasePickerProps<T> interface","propertyType":1,"property":[{"description":"","name":"componentRef","type":" (component?: IBasePicker<T>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function that specifies how the selected item will appear.","name":"onRenderItem","type":" (props: IPickerItemProps<T>) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function that specifies how an individual suggestion item will appear.","name":"onRenderSuggestionsItem","type":" (props: T, itemProps: any) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for what should happen when a person types text into the input.\r Returns the already selected items so the resolver can filter them out.","name":"onResolveSuggestions","type":" (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"A callback for what should happen when a user clicks the input.","name":"onEmptyInputFocus","type":" (selectedItems?: T[]) => T[] | PromiseLike<T[]>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Initial items that have already been selected and should appear in the people picker.","name":"defaultSelectedItems","type":" T[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for when the selected list of items changes.","name":"onChange","type":" (items?: T[]) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for when the user put focus on the picker","name":"onFocus","type":" React.FocusEventHandler<HTMLInputElement | BaseAutoFill>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for when the user moves the focus away from the picker","name":"onBlur","type":" React.FocusEventHandler<HTMLInputElement | BaseAutoFill>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback to get text from an item. Used to autofill text in the pickers.","name":"getTextFromItem","type":" (item: T, currentValue?: string) => string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback that gets the rest of the results when a user clicks get more results.","name":"onGetMoreResults","type":" (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ClassName for the picker.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The properties that will get passed to the Suggestions component.","name":"pickerSuggestionsProps","type":" IBasePickerSuggestionsProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"AutoFill input native props","name":"inputProps","type":" IInputProps","defaultValue":" undefined\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for when a persona is removed from the suggestion list","name":"onRemoveSuggestion","type":" (item: IPersonaProps) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A function used to validate if raw text entered into the well can be added into the selected items list","name":"onValidateInput","type":" (input: string) => ValidationState","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text to display while searching for more results in a limited suggestions list","name":"searchingText","type":" ((props: { input: string }) => string) | string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Flag for disabling the picker.","name":"disabled","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Restrict the amount of selectable items.","name":"itemLimit","type":" number","defaultValue":" undefined\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function that specifies how arbitrary text entered into the well is handled.","name":"createGenericItem","type":" (input: string, ValidationState: ValidationState) => ISuggestionModel<T>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria label for the \"X\" button in the selected item component.","name":"removeButtonAriaLabel","type":" string","defaultValue":" ''\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback to process a selection after the user selects something from the picker.","name":"onItemSelected","type":" (selectedItem?: T) => T | PromiseLike<T>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component.","name":"selectedItems","type":" T[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"IBasePickerSuggestionsProps":{"name":"IBasePickerSuggestionsProps","propertyName":"IBasePickerSuggestionsProps interface","propertyType":1,"property":[{"description":"Function that specifies what to render when no results are found.","name":"onRenderNoResultFound","type":" IRenderFunction<void>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that should appear at the top of the suggestion box.","name":"suggestionsHeaderText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that should appear at the top of the most recenty used box.","name":"mostRecentlyUsedHeaderText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"the text that should appear when no results are returned.","name":"noResultsFoundText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ClassName for the picker.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Classname for the suggestion box.","name":"suggestionsClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"ClassName for suggestion items.","name":"suggestionsItemClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that should appear on the button to search for more.","name":"searchForMoreText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text to display while the results are loading.","name":"loadingText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text to display while searching for more results in a limited sugesstions list.","name":"searchingText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.","name":"resultsFooterFull","type":" () => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer that adds an element at the end of the suggestions list when there are fewer than resultsMaximumNumber.","name":"resultsFooter","type":" () => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Maximum number of suggestions to show in the full suggestion list.","name":"resultsMaximumNumber","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates whether to show a button with each suggestion to remove that suggestion.","name":"showRemoveButtons","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Screen reader message to read when there are suggestions available.","name":"suggestionsAvailableAlertText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ValidationState":{"name":"ValidationState","propertyName":"ValidationState enum","propertyType":0,"property":[{"description":"","name":"valid"},{"description":"","name":"warning"},{"description":"","name":"invalid"}],"extends":[""]},"IInputProps":{"name":"IInputProps","propertyName":"IInputProps interface","propertyType":1,"property":[{"description":"Screen reader label to apply to an input element.","name":"'aria-label'","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.InputHTMLAttributes"]},"IPeoplePickerItemProps":{"name":"IPeoplePickerItemProps","propertyName":"IPeoplePickerItemProps interface","propertyType":1,"property":[{"description":"","name":"ValidationState","type":" ValidationState }> {\r\n}","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["IPickerItemProps"]},"IPeoplePickerItemWithMenuProps":{"name":"IPeoplePickerItemWithMenuProps","propertyName":"IPeoplePickerItemWithMenuProps interface","propertyType":1,"property":[{"description":"","name":"item","type":" IPersonaWithMenu","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["IPickerItemProps"]},"IPersonaWithMenu":{"name":"IPersonaWithMenu","propertyName":"IPersonaWithMenu interface","propertyType":1,"property":[{"description":"","name":"menuItems","type":" IContextualMenuItem[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["IPersonaProps"]},"IPickerItemProps":{"name":"IPickerItemProps","propertyName":"IPickerItemProps<T> interface","propertyType":1,"property":[{"description":"","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"item","type":" T","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"index","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"selected","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"onRemoveItem","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Internal Use only, gives a callback to the renderer to call when an item has changed.\r This allows the base picker to keep track of changes in the items.","name":"onItemChange","type":" (item: T, index: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"key","type":" string | number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"removeButtonAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.AllHTMLAttributes"]},"ISuggestionsProps":{"name":"ISuggestionsProps","propertyName":"ISuggestionsProps<T> interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the suggestion should look in the suggestion list.","name":"onRenderSuggestion","type":" (props: T, suggestionItemProps: T) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"What should occur when a suggestion is clicked","name":"onSuggestionClick","type":" (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The list of Suggestions that will be displayed","name":"suggestions","type":" ISuggestionModel<T>[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"How the \"no result found\" should look in the suggestion list.","name":"onRenderNoResultFound","type":" IRenderFunction<void>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that appears at the top of the suggestions list.","name":"suggestionsHeaderText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that should appear at the top of the most recenty used box.","name":"mostRecentlyUsedHeaderText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that appears indicating to the user that they can search for more results.","name":"searchForMoreText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The callback that should be called when the user attempts to get more results","name":"onGetMoreResults","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The CSS classname of the suggestions list.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that should appear if there is a search error.","name":"searchErrorText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text that should appear if no results are found when searching.","name":"noResultsFoundText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"the classname of the suggestionitem.","name":"suggestionsItemClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Used to indicate whether or not the user can request more suggestions.\r Dictates whether or not the searchForMore button is displayed.","name":"moreSuggestionsAvailable","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Used to indicate whether or not the suggestions are loading.","name":"isLoading","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Used to indicate whether or not the component is searching for more results.","name":"isSearching","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text to display while the results are loading.","name":"loadingText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text to display while searching for more results in a limited sugesstions list.","name":"searchingText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates if a short list of recent suggestions should be shown.","name":"isMostRecentlyUsedVisible","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function to fire when one of the optional remove buttons on a suggestion is clicked.","name":"onSuggestionRemove","type":" (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list.","name":"isResultsFooterVisible","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Maximum number of suggestions to show in the full suggestion list.","name":"resultsMaximumNumber","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber.","name":"resultsFooterFull","type":" (props: ISuggestionsProps<T>) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber.","name":"resultsFooter","type":" (props: ISuggestionsProps<T>) => JSX.Element","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicates whether to show a button with each suggestion to remove that suggestion.","name":"showRemoveButtons","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Screen reader message to read when there are suggestions available.","name":"suggestionsAvailableAlertText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A function that resets focus to the expected item in the suggestion list","name":"refocusSuggestions","type":" (keyCode: KeyCodes) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"ISuggestionItemProps":{"name":"ISuggestionItemProps","propertyName":"ISuggestionItemProps<T> interface","propertyType":1,"property":[{"description":"","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"suggestionModel","type":" ISuggestionModel<T>","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"RenderSuggestion","type":" (item: T, suggestionItemProps?: ISuggestionItemProps<T>) => JSX.Element","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"onClick","type":" (ev: React.MouseEvent<HTMLButtonElement>) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"onRemoveItem","type":" (ev: React.MouseEvent<HTMLButtonElement>) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"id","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"","name":"showRemoveButton","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IPivot":{"name":"IPivot","propertyName":"IPivot interface","propertyType":1,"property":[],"extends":[""]},"IPivotProps":{"name":"IPivotProps","propertyName":"IPivotProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IPivot interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IPivot) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The index of the pivot item initially selected.\r\r It only works when initialSelectedKey is not defined. You must not use them together.","name":"initialSelectedIndex","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The key of the pivot item initially selected.\r\r It will make initialSelectedIndex not work. You must not use them together.","name":"initialSelectedKey","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The key of the selected pivot item.\r\r If set, this will override the Pivot's selected item state.","name":"selectedKey","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when the selected pivot item is changed","name":"onLinkClick","type":" (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Specify the PivotLinkSize to use (normal, large)","name":"linkSize","type":" PivotLinkSize","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Specify the PivotLinkFormat to use (links, tabs)","name":"linkFormat","type":" PivotLinkFormat","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Specify whether to skip rendering the tabpanel with the content of the selected tab.\r Use this prop if you plan to separately render the tab content\r and don't want to leave an empty tabpanel in the page that may confuse Screen Readers.","name":"headersOnly","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional. Specify how IDs are generated for each tab header.\r Useful if you're rendering content outside and need to connect aria-labelledby.","name":"getTabId","type":" (itemKey: string, index: number) => string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"PivotLinkFormat":{"name":"PivotLinkFormat","propertyName":"PivotLinkFormat enum","propertyType":0,"property":[{"description":"Display Pivot Links as links","name":"links"},{"description":"Display Pivot Links as Tabs","name":"tabs"}],"extends":[""]},"PivotLinkSize":{"name":"PivotLinkSize","propertyName":"PivotLinkSize enum","propertyType":0,"property":[{"description":"Display Link using normal font size","name":"normal"},{"description":"Display links using large font size","name":"large"}],"extends":[""]},"IPivotItemProps":{"name":"IPivotItemProps","propertyName":"IPivotItemProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The text displayed of each pivot link.","name":"linkText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An required key to uniquely identify a pivot item.\r\r Note: The 'key' from react props cannot be used inside component.","name":"itemKey","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria label of each pivot link which will read by screen reader instead of linkText.\r\r Note that unless you have compelling requirements you should not override aria-label.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An optional item count that gets displayed just after the linkText(itemCount)\r\r Example: completed(4)","name":"itemCount","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An optional icon to show next to the pivot link.","name":"itemIcon","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the pivot item link","name":"onRenderItemLink","type":" IRenderFunction<IPivotItemProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IPopup":{"name":"IPopup","propertyName":"IPopup interface","propertyType":1,"property":[],"extends":[""]},"IPopupProps":{"name":"IPopupProps","propertyName":"IPopupProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IPopup interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IPopup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria role for popup","name":"role","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Accessible label text for the popup.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines the element id referencing the element containing label text for popup.","name":"ariaLabelledBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Defines the element id referencing the element containing the description for the popup.","name":"ariaDescribedBy","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will\r handle escape keypresses and call this. The event will be stopped/canceled.","name":"onDismiss","type":" (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name for the root popup div.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If true, the unmounting of this component will cause focus to be restored to the element that had focus when first mounted.","name":"shouldRestoreFocus","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IProgressIndicator":{"name":"IProgressIndicator","propertyName":"IProgressIndicator interface","propertyType":1,"property":[],"extends":[""]},"IProgressIndicatorProps":{"name":"IProgressIndicatorProps","propertyName":"IProgressIndicatorProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IProgressIndicator interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IProgressIndicator) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Class name to apply to the root in addition to ms-ProgressIndicator.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Label to display above the control.","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text describing or supplementing the operation.","name":"description","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Percentage of the operation's completeness.","name":"percentComplete","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text alternative of the progress status, used by screen readers for reading the value of the progress.","name":"ariaValueText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.43.0, to be removed at >= v0.53.0. Use 'label' instead.","name":"title","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":[""]},"IRating":{"name":"IRating","propertyName":"IRating interface","propertyType":1,"property":[],"extends":[""]},"IRatingProps":{"name":"IRatingProps","propertyName":"IRatingProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IRating interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IRating) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Selected rating, has to be an integer between min and max","name":"rating","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Minimum rating, defaults to 1, has to be >= 0","name":"min","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Maximum rating, defaults to 5, has to be >= min","name":"max","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom icon, defaults to FavoriteStar","name":"icon","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Size of rating, defaults to small","name":"size","type":" RatingSize","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when the rating has changed","name":"onChanged","type":" (rating: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional label for star ratings, will be read by screen readers, defaults to 'Star'.","name":"ariaLabelIcon","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional id of label describing this instance of Rating","name":"ariaLabelId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.AllHTMLAttributes"]},"RatingSize":{"name":"RatingSize","propertyName":"RatingSize enum","propertyType":0,"property":[{"description":"","name":"Small"},{"description":"","name":"Large"}],"extends":[""]},"IResizeGroup":{"name":"IResizeGroup","propertyName":"IResizeGroup interface","propertyType":1,"property":[],"extends":[""]},"IResizeGroupProps":{"name":"IResizeGroupProps","propertyName":"IResizeGroupProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IResizeGroup) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Initial data to be passed to the onRenderData function. When there is no onGrowData provided, this data should represent what should\r be passed to the render function when the parent container of the ResizeGroup is at it's maximum supported width. A cacheKey property\r may optionally be included as part of the data. Two data objects with the same cacheKey will be assumed to take up the\r same width and will prevent measurements. The type of cacheKey is a string.","name":"data","type":" any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Function to render the data. Called when rendering the contents to the screen and when\r rendering in a hidden div to measure the size of the contents.","name":"onRenderData","type":" (data: any) => JSX.Element","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Function to be performed on the data in order to reduce its width and make it fit into the given space.\r If there are no more scaling steps to apply, it should return undefined to prevent\r an infinite render loop.","name":"onReduceData","type":" (prevData: any) => any","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Function to be performed on the data in order to increase its width. It is called in scenarios where the\r container has more room than the previous render and we may be able to fit more content. If there are no more\r scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.","name":"onGrowData","type":" (prevData: any) => any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Function to be called every time data is rendered. It provides the data that was actually rendered.\r A use case would be adding telemetry when a particular control is shown in an overflow well or\r dropped as a result of onReduceData or to count the number of renders that an implementation of\r onReduceData triggers.","name":"dataDidRender","type":" (renderedData: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IScrollablePaneProps":{"name":"IScrollablePaneProps","propertyName":"IScrollablePaneProps interface","propertyType":1,"property":[{"description":"Gets ref to component interface.","name":"componentRef","type":" (component: IScrollablePaneProps) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Class name to apply to the root in addition to ms-ScrollablePane.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"ISearchBox":{"name":"ISearchBox","propertyName":"ISearchBox interface","propertyType":1,"property":[{"description":"Sets focus inside the search input box.","name":"focus()","type":" void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ISearchBoxProps":{"name":"ISearchBoxProps","propertyName":"ISearchBoxProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ISearchBox interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ISearchBox) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Label text for the SearchBox.","name":"labelText","type":" string","defaultValue":" \"Search\"\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback function for when the typed input for the SearchBox has changed.","name":"onChange","type":" (newValue: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback executed when the user presses enter in the search box.","name":"onSearch","type":" (newValue: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated at v0.52.2, use 'onChange' instead.","name":"onChanged","type":" (newValue: any) => void","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"The value of the text in the SearchBox.","name":"value","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"CSS class to apply to the SearchBox.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria label of the SearchBox for the benefit of screen readers.","name":"ariaLabel","type":" string","defaultValue":" labelText\r","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.InputHTMLAttributes"]},"ISlider":{"name":"ISlider","propertyName":"ISlider interface","propertyType":1,"property":[{"description":"","name":"value","type":" number | undefined","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ISliderProps":{"name":"ISliderProps","propertyName":"ISliderProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ISlider interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ISlider) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Description label of the Slider","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component.\r This value is mutually exclusive to value. Use one or the other.","name":"defaultValue","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.\r This value is mutually exclusive to defaultValue. Use one or the other.","name":"value","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The min value of the Slider","name":"min","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The max value of the Slider","name":"max","type":" number","defaultValue":" 10\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The difference between the two adjacent values of the Slider","name":"step","type":" number","defaultValue":" 1\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether to show the value on the right of the Slider.","name":"showValue","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when the value has been changed","name":"onChange","type":" (value: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A description of the Slider for the benefit of screen readers.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag to render the slider vertically. Defaults to rendering horizontal.","name":"vertical","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag to render the Slider as disabled.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional className to attach to the slider root element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional mixin for additional props on the thumb button within the slider.","name":"buttonProps","type":" React.HTMLAttributes<HTMLButtonElement>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ISpinButton":{"name":"ISpinButton","propertyName":"ISpinButton interface","propertyType":1,"property":[{"description":"The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events.\r This value is mutually exclusive to defaultValue. Use one or the other.","name":"value","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Sets focus to the spin button.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ISpinButtonProps":{"name":"ISpinButtonProps","propertyName":"ISpinButtonProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" (component?: ISpinButton) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The initial value of the SpinButton. Use this if you intend for the SpinButton to be an uncontrolled component.\r This value is mutually exclusive to value. Use one or the other.","name":"defaultValue","type":" string","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events.\r This value is mutually exclusive to defaultValue. Use one or the other.","name":"value","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The min value of the SpinButton.","name":"min","type":" number","defaultValue":" 0\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The max value of the SpinButton.","name":"max","type":" number","defaultValue":" 10\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The difference between the two adjacent values of the SpinButton.","name":"step","type":" number","defaultValue":" 1\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A description of the SpinButton for the benefit of screen readers.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A title for the SpinButton used for a more descriptive name that's also visible on its tooltip.","name":"title","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the SpinButton is disabled.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional className for SpinButton.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Descriptive label for the SpinButton.","name":"label","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"","name":"labelPosition","type":" Position","defaultValue":": Left\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Icon that goes along with the label for the whole SpinButton","name":"iconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This callback is triggered when the value inside the SpinButton should be validated.\r @return {string | void} If a string is returned, it will be used as the value of the SpinButton.","name":"onValidate","type":" (value: string) => string | void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This callback is triggered when the increment button is pressed or if the user presses up arrow with focus on the input of the spinButton\r @return {string | void} If a string is returned, it will be used as the value of the SpinButton.","name":"onIncrement","type":" (value: string) => string | void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"This callback is triggered when the decrement button is pressed or if the user presses down arrow with focus on the input of the spinButton\r @return {string | void} If a string is returned, it will be used as the value of the SpinButton.","name":"onDecrement","type":" (value: string) => string | void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for when the user put focus on the picker","name":"onFocus","type":" React.FocusEventHandler<HTMLInputElement>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A callback for when the user moves the focus away from the picker","name":"onBlur","type":" React.FocusEventHandler<HTMLInputElement>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Icon for the increment button of the spinButton","name":"incrementButtonIcon","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Icon for the decrement button of the spinButton","name":"decrementButtonIcon","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styling for individual elements within the button DOM.","name":"styles","type":" Partial<ISpinButtonStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for the upArrow button.\r\r Note: The buttons are in a checked state when arrow keys are used to\r incremenent/decrement the spinButton. Use rootChecked instead of rootPressed\r for styling when that is the case.","name":"upArrowButtonStyles","type":" Partial<IButtonStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for the downArrow button.\r\r Note: The buttons are in a checked state when arrow keys are used to\r incremenent/decrement the spinButton. Use rootChecked instead of rootPressed\r for styling when that is the case.","name":"downArrowButtonStyles","type":" Partial<IButtonStyles>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ISpinButtonStyles":{"name":"ISpinButtonStyles","propertyName":"ISpinButtonStyles interface","propertyType":1,"property":[{"description":"Styles for the root of the spin button component.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style for the label wrapper element of the component\r The label wrapper contains the icon and the label.","name":"labelWrapper","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when the label is positioned at the start.","name":"labelWrapperStart","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when the label is positioned at the end.","name":"labelWrapperEnd","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when the label is positioned at the top.","name":"labelWrapperTop","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when the label is positioned at the bottom.","name":"labelWrapperBottom","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style for the icon.","name":"icon","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style for the label text","name":"label","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style for spinButtonWrapper when enabled.","name":"spinButtonWrapper","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when label is positioned at the top/bottom.","name":"spinButtonWrapperTopBottom","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when spinButton is enabled/hovered.","name":"spinButtonWrapperHovered","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when spinButton is enabled/focused.","name":"spinButtonWrapperFocused","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when spinButton is disabled.","name":"spinButtonWrapperDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for the input.","name":"input","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override for ::selection","name":"inputTextSelected","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override when spinButton is disabled.","name":"inputDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Styles for the arrowButtonsContainer","name":"arrowButtonsContainer","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Style override for the arrowButtonsContainer when spin button is disabled.","name":"arrowButtonsContainerDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ISpinner":{"name":"ISpinner","propertyName":"ISpinner interface","propertyType":1,"property":[],"extends":[""]},"ISpinnerProps":{"name":"ISpinnerProps","propertyName":"ISpinnerProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ISpinner interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ISpinner) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated and will be removed at >= 2.0.0. Use SpinnerSize instead.","name":"type","type":" SpinnerType","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"},{"description":"The size of Spinner to render. { extraSmall, small, medium, large }","name":"size","type":" SpinnerSize","defaultValue":" SpinnerType.medium\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The label to show next to the Spinner. Label updates will be announced to the screen readers.\r Use ariaLive to control politeness level.","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional CSS class(es) to apply to the Spinner.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Politeness setting for label update announcement.","name":"ariaLive","type":" 'assertive' | 'polite' | 'off'","defaultValue":" polite\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Alternative status label for screen reader","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"SpinnerSize":{"name":"SpinnerSize","propertyName":"SpinnerSize enum","propertyType":0,"property":[{"description":"12px Spinner diameter","name":"xSmall"},{"description":"16px Spinner diameter","name":"small"},{"description":"20px Spinner diameter","name":"medium"},{"description":"28px Spinner diameter","name":"large"}],"extends":[""]},"SpinnerType":{"name":"SpinnerType","propertyName":"SpinnerType enum","propertyType":0,"property":[{"description":"Deprecated and will be removed at >= 2.0.0. Use SpinnerSize.medium instead.","name":"normal"},{"description":"Deprecated and will be removed at >= 2.0.0. Use SpinnerSize.large instead.","name":"large"}],"extends":[""]},"IStickyProps":{"name":"IStickyProps","propertyName":"IStickyProps interface","propertyType":1,"property":[{"description":"Gets ref to component interface.","name":"componentRef","type":" (component: IStickyProps) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Class name to apply to the sticky element if component is sticky.","name":"stickyClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Region to render sticky component in.  Defaults to Both.","name":"stickyPosition","type":" StickyPositionType","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props"]},"StickyPositionType":{"name":"StickyPositionType","propertyName":"StickyPositionType enum","propertyType":0,"property":[{"description":"","name":"Both"},{"description":"","name":"Header"},{"description":"","name":"Footer"}],"extends":[""]},"ISwatchColorPicker":{"name":"ISwatchColorPicker","propertyName":"ISwatchColorPicker interface","propertyType":1,"property":[{"description":"","name":"export interface ISwatchColorPickerProps {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef","type":" (componentRef?: ISwatchColorPicker) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"the number of columns for the swatch color picker","name":"columnCount","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The id for the swatch color picker","name":"id","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional class name to provide on the root element","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The shape of the color cells, defaults to circle","name":"cellShape","type":" 'circle' | 'square'","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The id of color cell that is currently selected","name":"selectedId","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The color cells that will be made available to the user","name":"colorCells","type":" IColorCellProps[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Callback issued when the user changes the color.\r Note, if no id or color is given, there is no selected cell\r (e.g. the user executed the currently selected cell to unselect it)","name":"onColorChanged","type":" (id?: string, color?: string) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when the user hovers over a color cell.\r Note, if no id or color is given, cells are not longer being hovered","name":"onCellHovered","type":" (id?: string, color?: string) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issued when the user focuses a color cell.\r Note, if no id or color is given, cells are not longer being focused","name":"onCellFocused","type":" (id?: string, color?: string) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Is this swatch color picker disabled?","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The optional position this grid is in the parent set (index in a parent menu, for example)","name":"positionInSet","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The optional size of the parent set (size of parent menu, for example)","name":"setSize","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Should focus cycle to the beginning of once the user navigates past the end (and visa vsersa). Defaults to true","name":"shouldFocusCircularNavigate","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IColorCellProps":{"name":"IColorCellProps","propertyName":"IColorCellProps interface","propertyType":1,"property":[{"description":"Arbitrary unique string associated with this option","name":"id","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The label for this item.\r Visible text if this item is a header,\r tooltip if is this item is normal","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The CSS-compatible string to describe the color","name":"color","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Index for this option","name":"index","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ITeachingBubble":{"name":"ITeachingBubble","propertyName":"ITeachingBubble interface","propertyType":1,"property":[],"extends":[""]},"ITeachingBubbleProps":{"name":"ITeachingBubbleProps","propertyName":"ITeachingBubbleProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ISlider interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ITeachingBubble) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Properties to pass through for Callout, reference detail properties in ICalloutProps","name":"calloutProps","type":" ICalloutProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A headline for the Teaching Bubble.","name":"headline","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A variation with smaller bold headline and no margins.","name":"hasCondensedHeadline","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Does the TeachingBubble have a close button in the top right corner?","name":"hasCloseIcon","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"An Image for the Teaching Bubble.","name":"illustrationImage","type":" IImageProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The Primary interaction button","name":"primaryButtonProps","type":" IButtonProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The Secondary interaction button","name":"secondaryButtonProps","type":" IButtonProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Element to anchor the TeachingBubble to.","name":"targetElement","type":" HTMLElement","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback when the TeachingBubble tries to close.","name":"onDismiss","type":" (ev?: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.Props","IAccessiblePopupProps"]},"ITextField":{"name":"ITextField","propertyName":"ITextField interface","propertyType":1,"property":[{"description":"Gets the current value of the input.","name":"value","type":" string | undefined","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets focus to the input.","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Select the value of the text field.","name":"select","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets the selection start of the text field to a specified value.","name":"setSelectionStart","type":" (value: number) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets the selection end of the text field to a specified value.","name":"setSelectionEnd","type":" (value: number) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Sets the start and end positions of a selection in a text field.\r @param start Index of the start of the selection.\r @param end Index of the end of the selection.","name":"setSelectionRange","type":" (start: number, end: number) => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Gets the selection start of the text field. Returns -1 if there is no selection.","name":"selectionStart","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Gets the selection end of the text field. Returns -1 if there is no selection.","name":"selectionEnd","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"ITextFieldProps":{"name":"ITextFieldProps","propertyName":"ITextFieldProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ITextField interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ITextField) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the textfield is a multiline textfield.","name":"multiline","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the multiline textfield is resizable.","name":"resizable","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to auto adjust textField height. Applies only to multiline textfield.","name":"autoAdjustHeight","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the textfield is underlined.","name":"underlined","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the textfield is borderless.","name":"borderless","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Label for the textfield.","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The textfield input description","name":"description","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"String for addon.","name":"addonString","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom render function for addon","name":"onRenderAddon","type":" IRenderFunction<ITextFieldProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional icon props for an icon.","name":"iconProps","type":" IIconProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Default value of the textfield, if any. Only provide this if the textfield is an uncontrolled component;\r otherwise, use the \"value\" property.","name":"defaultValue","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Current value of the textfield. Only provide this if the textfield is a controlled component where you\r are maintaining its current state; otherwise, use the \"defaultValue\" property.","name":"value","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Disabled state of the textfield.","name":"disabled","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If set, this will display an error message for the text field.","name":"errorMessage","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for the onChanged event.","name":"onChanged","type":" (newValue: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for the onBeforeChange event.","name":"onBeforeChange","type":" (newValue: any) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback for the onNotifyValidationResult event.","name":"onNotifyValidationResult","type":" (errorMessage: string, value: string | undefined) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The method is used to get the validation error message and determine whether the input value is valid or not.\r\r   When it returns string:\r   - If valid, it returns empty string.\r   - If invalid, it returns the error message string and the text field will\r     show a red border and show an error message below the text field.\r\r   When it returns Promise<string>:\r   - The resolved value is display as error message.\r   - The rejected, the value is thrown away.","name":"onGetErrorMessage","type":" (value: string) => string | PromiseLike<string> | undefined","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.","name":"deferredValidationTime","type":" number","defaultValue":" 200\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name that is added to the container of the component.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name that is added specifically to the input/textarea element.","name":"inputClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria Label for textfield, if any.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Run validation only on input focus","name":"validateOnFocusIn","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Run validation only on input focus out","name":"validateOnFocusOut","type":" boolean","defaultValue":" false\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional flag to disable onload validation","name":"validateOnLoad","type":" boolean","defaultValue":" true\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Deprecated; use iconProps instead.","name":"iconClass","type":" string","defaultValue":"","interfacePropertyType":2,"deprecatedMessage":"\r"}],"extends":["React.AllHTMLAttributes"]},"IToggle":{"name":"IToggle","propertyName":"IToggle interface","propertyType":1,"property":[{"description":"","name":"focus","type":" () => void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":[""]},"IToggleProps":{"name":"IToggleProps","propertyName":"IToggleProps interface","propertyType":1,"property":[{"description":"Optional callback to access the IToggle interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: IToggle) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"A label for the toggle.","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to display when toggle is ON.","name":"onText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text to display when toggle is OFF.","name":"offText","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text for screen-reader to announce when toggle is ON.","name":"onAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Text for screen-reader to announce when toggle is OFF.","name":"offAriaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Checked state of the toggle. If you are maintaining state yourself, use this property. Otherwise refer to 'defaultChecked'.","name":"checked","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Initial state of the toggle. If you want the toggle to maintain its own state, use this. Otherwise refer to 'checked'.","name":"defaultChecked","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional disabled flag.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"onchange callback.","name":"onChanged","type":" (checked: boolean) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Theme provided by HOC.","name":"theme","type":" ITheme","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom styles for this component","name":"styles","type":" IToggleStyles","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IToggleStyles":{"name":"IToggleStyles","propertyName":"IToggleStyles interface","propertyType":1,"property":[{"description":"Style for the root element in the default enabled/unchecked state.","name":"root","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the text before the actual toggle switch.","name":"label","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the container wrapping switch and the state (on/off) text.","name":"container","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the toggle \"pill\" element, which is inside of the container and contains the thumb.","name":"pill","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the pill element when enabled/checked.","name":"pillChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the pill element when enabled/unchecked/hovered.","name":"pillHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the pill element when enabled/checked/hovered.","name":"pillCheckedHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the pill element when disabled/unchecked.","name":"pillDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the pill element when disabled/checked.","name":"pillCheckedDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the thumb element inside of the pill, in the normal unchecked enabled state.","name":"thumb","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the thumb when enabled/unchecked/hovered.","name":"thumbHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the thumb when enabled/checked.","name":"thumbChecked","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the thumb when enabled/checked/hovered.","name":"thumbCheckedHovered","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the thumb when disabled/unchecked.","name":"thumbDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style override for the thumb when disabled/checked.","name":"thumbCheckedDisabled","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Style for the text indicating the on/off state of the control.","name":"text","type":" IStyle","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ITooltip":{"name":"ITooltip","propertyName":"ITooltip interface","propertyType":1,"property":[],"extends":[""]},"ITooltipProps":{"name":"ITooltipProps","propertyName":"ITooltipProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ITooltip interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ITooltip) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Properties to pass through for Callout, reference detail properties in ICalloutProps","name":"calloutProps","type":" ICalloutProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"String to be passed to the tooltip","name":"content","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Render function to populate content area","name":"onRenderContent","type":" IRenderFunction<ITooltipProps>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Length of delay. Can be set to zero if you do not want a delay.","name":"delay","type":" TooltipDelay","defaultValue":" medium\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Max width of tooltip","name":"maxWidth","type":" string | null","defaultValue":" 364px\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Element to anchor the Tooltip to.","name":"targetElement","type":" HTMLElement","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicator of how the tooltip should be anchored to its targetElement.","name":"directionalHint","type":" DirectionalHint","defaultValue":" DirectionalHint.topCenter\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the element should be positioned in RTL layouts.\r If not specified, a mirror of `directionalHint` will be used instead","name":"directionalHintForRTL","type":" DirectionalHint","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"TooltipDelay":{"name":"TooltipDelay","propertyName":"TooltipDelay enum","propertyType":0,"property":[{"description":"","name":"zero"},{"description":"","name":"medium"}],"extends":[""]},"ITooltipHost":{"name":"ITooltipHost","propertyName":"ITooltipHost interface","propertyType":1,"property":[],"extends":[""]},"TooltipOverflowMode":{"name":"TooltipOverflowMode","propertyName":"TooltipOverflowMode enum","propertyType":0,"property":[{"description":"Only show tooltip if parent DOM element is overflowing","name":"Parent"},{"description":"Only show tooltip if tooltip host's content is overflowing","name":"Self"}],"extends":[""]},"ITooltipHostProps":{"name":"ITooltipHostProps","propertyName":"ITooltipHostProps interface","propertyType":1,"property":[{"description":"Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: ITooltipHost) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional properties to pass through for Callout, reference detail properties in ICalloutProps","name":"calloutProps","type":" ICalloutProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Additional properties to pass through for Tooltip, reference detail properties in ITooltipProps","name":"tooltipProps","type":" ITooltipProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not to mark the container as described by the tooltip.\r If not specified, the caller should mark as element as described by the tooltip id.","name":"setAriaDescribedBy","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Length of delay","name":"delay","type":" TooltipDelay","defaultValue":" medium\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"String to be passed to the tooltip","name":"content","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Indicator of how the tooltip should be anchored to its targetElement.","name":"directionalHint","type":" DirectionalHint","defaultValue":" DirectionalHint.topCenter\r","interfacePropertyType":1,"deprecatedMessage":""},{"description":"How the element should be positioned in RTL layouts.\r If not specified, a mirror of `directionalHint` will be used instead","name":"directionalHintForRTL","type":" DirectionalHint","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Only show if there is overflow. If set, the tooltip hosts observes  and only shows the tooltip if this element has overflow.\r It also uses the parent as target element for the tooltip.","name":"overflowMode","type":" TooltipOverflowMode","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional class name to apply to tooltip host.","name":"hostClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Notifies when tooltip becomes visible or hidden, whatever the trigger was.","name":"onTooltipToggle?(isTooltipVisible","type":" boolean): void","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"IGridProps":{"name":"IGridProps","propertyName":"IGridProps interface","propertyType":1,"property":[{"description":"Gets the component ref.","name":"componentRef","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The items to turn into a grid","name":"items","type":" any[]","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"The number of columns","name":"columnCount","type":" number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Custom renderer for the individual items","name":"onRenderItem","type":" (item: any, index: number) => JSX.Element","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Boolean indicating if the focus should support circular navigation","name":"shouldFocusCircularNavigate","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, class name for the FocusZone container for the grid","name":"containerClassName","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, handler for when the grid should blur","name":"onBlur","type":" () => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The optional position this grid is in the parent set (index in a parent menu, for example)","name":"positionInSet","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The optional size of the parent set (size of parent menu, for example)","name":"setSize","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"IGridCellProps":{"name":"IGridCellProps","propertyName":"IGridCellProps<T> interface","propertyType":1,"property":[{"description":"The option that will be made available to the user","name":"item","type":" T","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Arbitrary unique string associated with this option","name":"id","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional, if the this option should be diabled","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, if the cell is currently selected","name":"selected","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The on click handler","name":"onClick","type":" (item: T) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The render callback to handle rendering the item","name":"onRenderItem","type":" (item: T) => JSX.Element","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Optional, the onHover handler","name":"onHover","type":" (item?: T) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, the onFocus handler","name":"onFocus","type":" (item: T) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The accessible role for this option","name":"role","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, className(s) to apply","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, the CSS class used for when the cell is disabled","name":"cellDisabledStyle","type":" string[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional, the CSS class used for when the cell is selected","name":"cellIsSelectedStyle","type":" string[]","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Index for this option","name":"index","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The label for this item.\r Visible text if this item is a header,\r tooltip if is this item is normal","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"ISelectableDroppableTextProps":{"name":"ISelectableDroppableTextProps","propertyName":"ISelectableDroppableTextProps<T> interface","propertyType":1,"property":[{"description":"Optional callback to access the ISelectableDroppableText interface. Use this instead of ref for accessing\r the public methods and properties of the component.","name":"componentRef","type":" (component: T) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Descriptive label for the ISelectableDroppableText","name":"label","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Aria Label for the ISelectableDroppableText for screen reader users.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Id of the ISelectableDroppableText","name":"id","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If provided, additional class name to provide on the root element.","name":"className","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The key that will be initially used to set a selected item.","name":"defaultSelectedKey","type":" string | number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The key of the selected item. If you provide this, you must maintain selection\r state by observing onChange events and passing a new value in when changed.","name":"selectedKey","type":" string | number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Collection of options for this ISelectableDroppableText","name":"options","type":" any","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Callback issues when the selected option changes","name":"onChanged","type":" (option: ISelectableOption, index?: number) => void","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the ISelectableDroppableText container","name":"onRenderContainer","type":" IRenderFunction<ISelectableDroppableTextProps<T>>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the ISelectableDroppableText list","name":"onRenderList","type":" IRenderFunction<ISelectableDroppableTextProps<T>>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the ISelectableDroppableText options","name":"onRenderItem","type":" IRenderFunction<ISelectableOption>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Optional custom renderer for the ISelectableDroppableText option content","name":"onRenderOption","type":" IRenderFunction<ISelectableOption>","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the ISelectableDroppableText is disabled.","name":"disabled","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Whether or not the ISelectableDroppableText is required.","name":"required","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Custom properties for ISelectableDroppableText's Callout used to render options.","name":"calloutProps","type":" ICalloutProps","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Descriptive label for the ISelectableDroppableText Error Message","name":"errorMessage","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":["React.HTMLAttributes"]},"ISelectableOption":{"name":"ISelectableOption","propertyName":"ISelectableOption interface","propertyType":1,"property":[{"description":"Arbitrary string associated with this option.","name":"key","type":" string | number","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Text to render for this option","name":"text","type":" string","defaultValue":"","interfacePropertyType":0,"deprecatedMessage":""},{"description":"Text to render for this option","name":"itemType","type":" SelectableOptionMenuItemType","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"Index for this option","name":"index","type":" number","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"The aria label for the dropdown option. If not present, the `text` will be used.","name":"ariaLabel","type":" string","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""},{"description":"If option is selected.","name":"selected","type":" boolean","defaultValue":"","interfacePropertyType":1,"deprecatedMessage":""}],"extends":[""]},"SelectableOptionMenuItemType":{"name":"SelectableOptionMenuItemType","propertyName":"SelectableOptionMenuItemType enum","propertyType":0,"property":[{"description":"","name":"Normal"},{"description":"","name":"Divider"},{"description":"","name":"Header"}],"extends":[""]}}