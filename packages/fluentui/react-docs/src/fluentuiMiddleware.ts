import { ComponentInfo, ComponentProp, FileInfo } from './types';
import { FluentBehaviorInfo, FluentComponentInfo } from './fluentuiTypes';
import * as Babel from '@babel/core';
import * as t from '@babel/types';
import * as _ from 'lodash';
import * as path from 'path';
import * as fs from 'fs';

import parseDefaultValue from './parseDefaultValue';
import getShorthandInfo from './getShorthandInfo';

const getAvailableBehaviors = (accessibilityProp: ComponentProp): FluentBehaviorInfo[] => {
  const docTags = accessibilityProp && accessibilityProp.tags;
  const availableTag = _.find(docTags, { title: 'available' });
  const availableBehaviorNames = _.get(availableTag, 'description', '');

  if (!availableBehaviorNames) {
    return undefined;
  }

  return availableBehaviorNames
    .replace(/\s/g, '')
    .split(',')
    .map(name => ({
      name,
      displayName: _.upperFirst(name.replace('Behavior', '')),
      category: _.upperFirst(name.split(/(?=[A-Z])/)[0])
    }));
};

// Middleware function that modifies the json generated by getComponentInfo
function fluentuiMiddleware(
  fileInfo: FileInfo,
  ignoredParentInterfaces: string[] = [],
  componentInfo: ComponentInfo
): FluentComponentInfo<ComponentInfo> {
  const { absPath, dir, dirname, filenameWithoutExt, info } = fileInfo;
  const { props, Component } = componentInfo;

  const componentFile = Babel.parse(fs.readFileSync(absPath).toString(), {
    configFile: false,
    presets: [['@babel/preset-typescript', { allExtensions: true, isTSX: true }]]
  }) as t.File;

  // available behaviors
  const behaviors = getAvailableBehaviors(_.find(props, { name: 'accessibility' }));

  // add parent/child info
  let isParent = filenameWithoutExt === dirname;

  // Tweak for Ref component as it is distributed as a separate package
  if (info.displayName === 'Ref') {
    isParent = true;
  }

  const isChild = !isParent;
  const parentDisplayName = isParent ? null : dirname;
  // "Field" for "FormField" since it is accessed as "Form.Field" in the API
  const subcomponentName = isParent ? null : info.displayName.replace(parentDisplayName, '');

  // "ListItem.js" is a subcomponent is the "List" directory
  const subcomponentRegExp = new RegExp(`^${dirname}\\w+\\.tsx$`);
  const subcomponents = isParent
    ? fs
        .readdirSync(dir)
        .filter(file => subcomponentRegExp.test(file))
        .map(file => path.basename(file, path.extname(file)))
    : null;

  // where this component should be exported in the api
  const apiPath = isChild ? `${parentDisplayName}.${subcomponentName}` : info.displayName;

  // class name for the component
  // example, the "button" in class="ui-button"
  // name of the component, sub component, or plural parent for sub component groups
  const componentClassName = (isChild
    ? _.includes(subcomponentName, 'Group')
      ? `ui-${parentDisplayName}s`
      : `ui-${parentDisplayName}__${subcomponentName}`
    : `ui-${info.displayName}`
  ).toLowerCase();

  // manually insert `as` prop
  if (info.props.as) {
    props.push({
      description: 'An element type to render as (string or component).',
      defaultValue: parseDefaultValue(Component, info.props.as, []) || 'div',
      tags: [],
      types: [{ name: 'React.ElementType' }],
      name: 'as',
      required: false
    });
  }

  return {
    ...componentInfo,
    ...getShorthandInfo(componentFile, info.displayName),
    apiPath,
    behaviors,
    componentClassName,
    isChild,
    isParent,
    parentDisplayName,
    subcomponentName,
    subcomponents
  };
}

export default fluentuiMiddleware;
