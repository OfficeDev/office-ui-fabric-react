/** @internal */
const RULE_CLASSNAME_INDEX = 1;

/** @internal */
const RULE_RTL_CLASSNAME_INDEX = 3;

function print(val) {
  const regexParts = [];
  const regex = lookupRegex();
  if (!regex) {
    return val;
  }
  let result = null;
  while ((result = regex.exec(val))) {
    const [name] = result;
    const [definitions] = global.DEFINITION_LOOKUP_TABLE[name];
    /**
     * Collects all classNames present in a definition and adds it as part of a regular expression
     * @example
     * rules = ["f16th3vw", "frdkuqy0", "fat0sn40", "fjseox00"]
     */
    const rules = Object.keys(definitions).map(key => {
      const classes = [];
      if (definitions[key][RULE_CLASSNAME_INDEX]) {
        classes.push(definitions[key][RULE_CLASSNAME_INDEX]);
      }
      if (definitions[key][RULE_RTL_CLASSNAME_INDEX]) {
        classes.push(definitions[key][RULE_RTL_CLASSNAME_INDEX]);
      }
      return classes.join('|');
    });
    regexParts.push(name, ...rules);
  }
  /**
   * form parts of regular expression and removes collected classNames from string
   * @example
   * regex = /r?(f16th3vw|frdkuqy0|fat0sn40|fjseox00)/
   */
  const valStrippedClassNames = val.replace(new RegExp(regexParts.join('|'), 'g'), '').trim();
  /**
   * Trim whitespace from className
   */
  return `"${valStrippedClassNames.replace(/className="\s*(\w*)\s*"/, 'className="$1"')}"`;
}

function test(val) {
  if (typeof val === 'string') {
    return (lookupRegex() && lookupRegex().test(val)) || false;
  }
  return false;
}

/**
 * lookupRegex returns all classNames definitions
 * that were generated by make-styles in a single regex declaration
 * @example
 * const useStyles = makeStyles({display: { display: 'none' } });
 *
 * lookupRegex() // /(__1qdh4ig)/g
 *
 */
function lookupRegex() {
  const definitionKeys = Object.keys(global.DEFINITION_LOOKUP_TABLE);
  if (definitionKeys.length) {
    return new RegExp(`${definitionKeys.join('|')}`, 'g');
  }
}

module.exports = {
  print,
  test,
};
