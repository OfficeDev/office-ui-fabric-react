pr:
  - 7.0

trigger:
  - 7.0

variables:
  - group: fabric-variables

pool: 'Self Host Ubuntu'

jobs:
  - job: BuildTestLint
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      - template: .devops/templates/pr-target-branch.yml

      # TEMPORARY FOR TESTING
      - script: |
          node ./scripts/generate-package-manifest
        displayName: 'Generates a package manifest'

      # TEMPORARY FOR TESTING
      - task: AzureUpload@2
        displayName: Upload Package Manifest
        inputs:
          SourcePath: 'package-manifest'
          azureSubscription: 'UI Fabric (bac044cf-49e1-4843-8dda-1ce9662606c8)'
          storage: fabricweb
          ContainerName: 'fabric'
          BlobPrefix: 'package-manifest'
          Gzip: false

      - script: |
          yarn checkchange
        displayName: check change

      ## manually call this since lage is now used and it calls lint per package, not per repo
      - script: |
          yarn prelint
        displayName: do syncpack and lint-files checks

      ## only do scoped builds with PRs
      - script: |
          yarn buildci --no-cache --since $(target_branch)
        displayName: build, test, lint (pr, scoped)
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/7.0')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      ## duplicated build step, but without --since flag for 7.0 CI builds
      - script: |
          yarn buildci --no-cache
        displayName: build, test, lint (7.0)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/7.0')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      - template: .devops/templates/cleanup.yml

  - job: Deploy
    workspace:
      clean: all
    variables:
      - template: .devops/templates/variables.yml
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      - template: .devops/templates/pr-target-branch.yml

      ## only do scoped bundle with PRs
      - script: |
          yarn bundle --no-cache --grouped --since $(target_branch)
        displayName: bundle (pr, scoped)
        condition: ne(variables['Build.SourceBranch'], 'refs/heads/7.0')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      ## duplicated for  7.0 CI builds
      - script: |
          yarn bundle --no-cache --grouped
        displayName: bundle (7.0)
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/7.0')
        env:
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      ## This runs regardless of scope, the app will adapt to the scope as well
      - script: |
          yarn workspace @uifabric/pr-deploy-site generate:site
        displayName: generate PR Deploy Site

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: Build-PR-$(Build.BuildNumber)

      - task: AzureUpload@2
        displayName: Upload PR deploy site
        inputs:
          SourcePath: 'apps/pr-deploy-site/dist'
          azureSubscription: 'UI Fabric (bac044cf-49e1-4843-8dda-1ce9662606c8)'
          storage: fabricweb
          ContainerName: '$web'
          BlobPrefix: '$(deployBasePath)'

      - task: GithubPRStatus@0
        displayName: 'Update PR deploy site github status'
        inputs:
          githubOwner: microsoft
          githubRepo: fluentui
          githubContext: 'Pull request demo site'
          githubDescription: 'Click "Details" to go to the deployed demo site for this pull request'
          githubTargetLink: 'http://fabricweb.z5.web.core.windows.net/pr-deploy-site/$(Build.SourceBranch)/'

      - template: .devops/templates/cleanup.yml

  - job: Screener
    workspace:
      clean: all
    steps:
      - template: .devops/templates/tools.yml

      - script: npx midgard-yarn install
        displayName: yarn

      - template: .devops/templates/pr-target-branch.yml

      - script: |
          yarn lage screener --to vr-tests --debug --verbose --no-cache --grouped
        displayName: run VR Test
        env:
          SCREENER_API_KEY: $(screener.key)
          BACKFILL_CACHE_PROVIDER: 'azure-blob'
          BACKFILL_CACHE_PROVIDER_OPTIONS: '{"connectionString":"$(BACKFILL_CONNECTION_STRING)", "container":"$(BACKFILL_CONTAINER)"}'

      - template: .devops/templates/cleanup.yml
